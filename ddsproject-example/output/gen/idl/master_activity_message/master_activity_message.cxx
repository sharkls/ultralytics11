// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file master_activity_message.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "master_activity_message.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




ActivityCmdControlMessage::ActivityCmdControlMessage()
{
}

ActivityCmdControlMessage::~ActivityCmdControlMessage()
{
}

ActivityCmdControlMessage::ActivityCmdControlMessage(
        const ActivityCmdControlMessage& x)
{
    m_activity_name = x.m_activity_name;
    m_activity_cmd = x.m_activity_cmd;
}

ActivityCmdControlMessage::ActivityCmdControlMessage(
        ActivityCmdControlMessage&& x) noexcept
{
    m_activity_name = std::move(x.m_activity_name);
    m_activity_cmd = x.m_activity_cmd;
}

ActivityCmdControlMessage& ActivityCmdControlMessage::operator =(
        const ActivityCmdControlMessage& x)
{

    m_activity_name = x.m_activity_name;
    m_activity_cmd = x.m_activity_cmd;
    return *this;
}

ActivityCmdControlMessage& ActivityCmdControlMessage::operator =(
        ActivityCmdControlMessage&& x) noexcept
{

    m_activity_name = std::move(x.m_activity_name);
    m_activity_cmd = x.m_activity_cmd;
    return *this;
}

bool ActivityCmdControlMessage::operator ==(
        const ActivityCmdControlMessage& x) const
{
    return (m_activity_name == x.m_activity_name &&
           m_activity_cmd == x.m_activity_cmd);
}

bool ActivityCmdControlMessage::operator !=(
        const ActivityCmdControlMessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member activity_name
 * @param _activity_name New value to be copied in member activity_name
 */
void ActivityCmdControlMessage::activity_name(
        const std::string& _activity_name)
{
    m_activity_name = _activity_name;
}

/*!
 * @brief This function moves the value in member activity_name
 * @param _activity_name New value to be moved in member activity_name
 */
void ActivityCmdControlMessage::activity_name(
        std::string&& _activity_name)
{
    m_activity_name = std::move(_activity_name);
}

/*!
 * @brief This function returns a constant reference to member activity_name
 * @return Constant reference to member activity_name
 */
const std::string& ActivityCmdControlMessage::activity_name() const
{
    return m_activity_name;
}

/*!
 * @brief This function returns a reference to member activity_name
 * @return Reference to member activity_name
 */
std::string& ActivityCmdControlMessage::activity_name()
{
    return m_activity_name;
}


/*!
 * @brief This function sets a value in member activity_cmd
 * @param _activity_cmd New value for member activity_cmd
 */
void ActivityCmdControlMessage::activity_cmd(
        ActivityRunCmdEnum _activity_cmd)
{
    m_activity_cmd = _activity_cmd;
}

/*!
 * @brief This function returns the value of member activity_cmd
 * @return Value of member activity_cmd
 */
ActivityRunCmdEnum ActivityCmdControlMessage::activity_cmd() const
{
    return m_activity_cmd;
}

/*!
 * @brief This function returns a reference to member activity_cmd
 * @return Reference to member activity_cmd
 */
ActivityRunCmdEnum& ActivityCmdControlMessage::activity_cmd()
{
    return m_activity_cmd;
}





ActivityStatusFeedbackMessage::ActivityStatusFeedbackMessage()
{
}

ActivityStatusFeedbackMessage::~ActivityStatusFeedbackMessage()
{
}

ActivityStatusFeedbackMessage::ActivityStatusFeedbackMessage(
        const ActivityStatusFeedbackMessage& x)
{
    m_activity_name = x.m_activity_name;
    m_activity_status = x.m_activity_status;
}

ActivityStatusFeedbackMessage::ActivityStatusFeedbackMessage(
        ActivityStatusFeedbackMessage&& x) noexcept
{
    m_activity_name = std::move(x.m_activity_name);
    m_activity_status = x.m_activity_status;
}

ActivityStatusFeedbackMessage& ActivityStatusFeedbackMessage::operator =(
        const ActivityStatusFeedbackMessage& x)
{

    m_activity_name = x.m_activity_name;
    m_activity_status = x.m_activity_status;
    return *this;
}

ActivityStatusFeedbackMessage& ActivityStatusFeedbackMessage::operator =(
        ActivityStatusFeedbackMessage&& x) noexcept
{

    m_activity_name = std::move(x.m_activity_name);
    m_activity_status = x.m_activity_status;
    return *this;
}

bool ActivityStatusFeedbackMessage::operator ==(
        const ActivityStatusFeedbackMessage& x) const
{
    return (m_activity_name == x.m_activity_name &&
           m_activity_status == x.m_activity_status);
}

bool ActivityStatusFeedbackMessage::operator !=(
        const ActivityStatusFeedbackMessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member activity_name
 * @param _activity_name New value to be copied in member activity_name
 */
void ActivityStatusFeedbackMessage::activity_name(
        const std::string& _activity_name)
{
    m_activity_name = _activity_name;
}

/*!
 * @brief This function moves the value in member activity_name
 * @param _activity_name New value to be moved in member activity_name
 */
void ActivityStatusFeedbackMessage::activity_name(
        std::string&& _activity_name)
{
    m_activity_name = std::move(_activity_name);
}

/*!
 * @brief This function returns a constant reference to member activity_name
 * @return Constant reference to member activity_name
 */
const std::string& ActivityStatusFeedbackMessage::activity_name() const
{
    return m_activity_name;
}

/*!
 * @brief This function returns a reference to member activity_name
 * @return Reference to member activity_name
 */
std::string& ActivityStatusFeedbackMessage::activity_name()
{
    return m_activity_name;
}


/*!
 * @brief This function sets a value in member activity_status
 * @param _activity_status New value for member activity_status
 */
void ActivityStatusFeedbackMessage::activity_status(
        ActivityStatusEnum _activity_status)
{
    m_activity_status = _activity_status;
}

/*!
 * @brief This function returns the value of member activity_status
 * @return Value of member activity_status
 */
ActivityStatusEnum ActivityStatusFeedbackMessage::activity_status() const
{
    return m_activity_status;
}

/*!
 * @brief This function returns a reference to member activity_status
 * @return Reference to member activity_status
 */
ActivityStatusEnum& ActivityStatusFeedbackMessage::activity_status()
{
    return m_activity_status;
}


// Include auxiliary functions like for serializing/deserializing.
#include "master_activity_messageCdrAux.ipp"

