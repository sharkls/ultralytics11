// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file master_activity_message.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_MASTER_ACTIVITY_MESSAGE_H_
#define _FAST_DDS_GENERATED_MASTER_ACTIVITY_MESSAGE_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MASTER_ACTIVITY_MESSAGE_SOURCE)
#define MASTER_ACTIVITY_MESSAGE_DllAPI __declspec( dllexport )
#else
#define MASTER_ACTIVITY_MESSAGE_DllAPI __declspec( dllimport )
#endif // MASTER_ACTIVITY_MESSAGE_SOURCE
#else
#define MASTER_ACTIVITY_MESSAGE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MASTER_ACTIVITY_MESSAGE_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



/*!
 * @brief This class represents the enumeration ActivityRunCmdEnum defined by the user in the IDL file.
 * @ingroup master_activity_message
 */
enum ActivityRunCmdEnum : uint32_t
{
    RUN,
    PAUSE,
    SHUTDOWN,
    NO_CMD
};


/*!
 * @brief This class represents the structure ActivityCmdControlMessage defined by the user in the IDL file.
 * @ingroup master_activity_message
 */
class ActivityCmdControlMessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ActivityCmdControlMessage();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ActivityCmdControlMessage();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ActivityCmdControlMessage that will be copied.
     */
    eProsima_user_DllExport ActivityCmdControlMessage(
            const ActivityCmdControlMessage& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ActivityCmdControlMessage that will be copied.
     */
    eProsima_user_DllExport ActivityCmdControlMessage(
            ActivityCmdControlMessage&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ActivityCmdControlMessage that will be copied.
     */
    eProsima_user_DllExport ActivityCmdControlMessage& operator =(
            const ActivityCmdControlMessage& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ActivityCmdControlMessage that will be copied.
     */
    eProsima_user_DllExport ActivityCmdControlMessage& operator =(
            ActivityCmdControlMessage&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ActivityCmdControlMessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ActivityCmdControlMessage& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ActivityCmdControlMessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ActivityCmdControlMessage& x) const;

    /*!
     * @brief This function copies the value in member activity_name
     * @param _activity_name New value to be copied in member activity_name
     */
    eProsima_user_DllExport void activity_name(
            const std::string& _activity_name);

    /*!
     * @brief This function moves the value in member activity_name
     * @param _activity_name New value to be moved in member activity_name
     */
    eProsima_user_DllExport void activity_name(
            std::string&& _activity_name);

    /*!
     * @brief This function returns a constant reference to member activity_name
     * @return Constant reference to member activity_name
     */
    eProsima_user_DllExport const std::string& activity_name() const;

    /*!
     * @brief This function returns a reference to member activity_name
     * @return Reference to member activity_name
     */
    eProsima_user_DllExport std::string& activity_name();


    /*!
     * @brief This function sets a value in member activity_cmd
     * @param _activity_cmd New value for member activity_cmd
     */
    eProsima_user_DllExport void activity_cmd(
            ActivityRunCmdEnum _activity_cmd);

    /*!
     * @brief This function returns the value of member activity_cmd
     * @return Value of member activity_cmd
     */
    eProsima_user_DllExport ActivityRunCmdEnum activity_cmd() const;

    /*!
     * @brief This function returns a reference to member activity_cmd
     * @return Reference to member activity_cmd
     */
    eProsima_user_DllExport ActivityRunCmdEnum& activity_cmd();

private:

    std::string m_activity_name;
    ActivityRunCmdEnum m_activity_cmd{::RUN};

};
/*!
 * @brief This class represents the enumeration ActivityStatusEnum defined by the user in the IDL file.
 * @ingroup master_activity_message
 */
enum ActivityStatusEnum : uint32_t
{
    INIT,
    RUNNING,
    PAUSED,
    FINISHED
};


/*!
 * @brief This class represents the structure ActivityStatusFeedbackMessage defined by the user in the IDL file.
 * @ingroup master_activity_message
 */
class ActivityStatusFeedbackMessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ActivityStatusFeedbackMessage();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ActivityStatusFeedbackMessage();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ActivityStatusFeedbackMessage that will be copied.
     */
    eProsima_user_DllExport ActivityStatusFeedbackMessage(
            const ActivityStatusFeedbackMessage& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ActivityStatusFeedbackMessage that will be copied.
     */
    eProsima_user_DllExport ActivityStatusFeedbackMessage(
            ActivityStatusFeedbackMessage&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ActivityStatusFeedbackMessage that will be copied.
     */
    eProsima_user_DllExport ActivityStatusFeedbackMessage& operator =(
            const ActivityStatusFeedbackMessage& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ActivityStatusFeedbackMessage that will be copied.
     */
    eProsima_user_DllExport ActivityStatusFeedbackMessage& operator =(
            ActivityStatusFeedbackMessage&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ActivityStatusFeedbackMessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ActivityStatusFeedbackMessage& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ActivityStatusFeedbackMessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ActivityStatusFeedbackMessage& x) const;

    /*!
     * @brief This function copies the value in member activity_name
     * @param _activity_name New value to be copied in member activity_name
     */
    eProsima_user_DllExport void activity_name(
            const std::string& _activity_name);

    /*!
     * @brief This function moves the value in member activity_name
     * @param _activity_name New value to be moved in member activity_name
     */
    eProsima_user_DllExport void activity_name(
            std::string&& _activity_name);

    /*!
     * @brief This function returns a constant reference to member activity_name
     * @return Constant reference to member activity_name
     */
    eProsima_user_DllExport const std::string& activity_name() const;

    /*!
     * @brief This function returns a reference to member activity_name
     * @return Reference to member activity_name
     */
    eProsima_user_DllExport std::string& activity_name();


    /*!
     * @brief This function sets a value in member activity_status
     * @param _activity_status New value for member activity_status
     */
    eProsima_user_DllExport void activity_status(
            ActivityStatusEnum _activity_status);

    /*!
     * @brief This function returns the value of member activity_status
     * @return Value of member activity_status
     */
    eProsima_user_DllExport ActivityStatusEnum activity_status() const;

    /*!
     * @brief This function returns a reference to member activity_status
     * @return Reference to member activity_status
     */
    eProsima_user_DllExport ActivityStatusEnum& activity_status();

private:

    std::string m_activity_name;
    ActivityStatusEnum m_activity_status{::INIT};

};

#endif // _FAST_DDS_GENERATED_MASTER_ACTIVITY_MESSAGE_H_



