// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: activity_test.proto
// Protobuf C++ Version: 5.30.0-dev

#ifndef activity_5ftest_2eproto_2epb_2eh
#define activity_5ftest_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_activity_5ftest_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_activity_5ftest_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_activity_5ftest_2eproto;
class ActivityTestConfig;
struct ActivityTestConfigDefaultTypeInternal;
extern ActivityTestConfigDefaultTypeInternal _ActivityTestConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ActivityTestConfig_class_data_;
class ActivityTestTopicConfig;
struct ActivityTestTopicConfigDefaultTypeInternal;
extern ActivityTestTopicConfigDefaultTypeInternal _ActivityTestTopicConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ActivityTestTopicConfig_class_data_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class ActivityTestTopicConfig final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ActivityTestTopicConfig) */ {
 public:
  inline ActivityTestTopicConfig() : ActivityTestTopicConfig(nullptr) {}
  ~ActivityTestTopicConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ActivityTestTopicConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ActivityTestTopicConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ActivityTestTopicConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline ActivityTestTopicConfig(const ActivityTestTopicConfig& from) : ActivityTestTopicConfig(nullptr, from) {}
  inline ActivityTestTopicConfig(ActivityTestTopicConfig&& from) noexcept
      : ActivityTestTopicConfig(nullptr, std::move(from)) {}
  inline ActivityTestTopicConfig& operator=(const ActivityTestTopicConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityTestTopicConfig& operator=(ActivityTestTopicConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivityTestTopicConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivityTestTopicConfig* internal_default_instance() {
    return reinterpret_cast<const ActivityTestTopicConfig*>(
        &_ActivityTestTopicConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ActivityTestTopicConfig& a, ActivityTestTopicConfig& b) { a.Swap(&b); }
  inline void Swap(ActivityTestTopicConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityTestTopicConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivityTestTopicConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ActivityTestTopicConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ActivityTestTopicConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ActivityTestTopicConfig& from) { ActivityTestTopicConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ActivityTestTopicConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ActivityTestTopicConfig"; }

 protected:
  explicit ActivityTestTopicConfig(::google::protobuf::Arena* arena);
  ActivityTestTopicConfig(::google::protobuf::Arena* arena, const ActivityTestTopicConfig& from);
  ActivityTestTopicConfig(::google::protobuf::Arena* arena, ActivityTestTopicConfig&& from) noexcept
      : ActivityTestTopicConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReadTopic1FieldNumber = 1,
    kWriteTopic2FieldNumber = 2,
  };
  // optional string read_topic1 = 1;
  bool has_read_topic1() const;
  void clear_read_topic1() ;
  const std::string& read_topic1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_read_topic1(Arg_&& arg, Args_... args);
  std::string* mutable_read_topic1();
  [[nodiscard]] std::string* release_read_topic1();
  void set_allocated_read_topic1(std::string* value);

  private:
  const std::string& _internal_read_topic1() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_read_topic1(const std::string& value);
  std::string* _internal_mutable_read_topic1();

  public:
  // optional string write_topic2 = 2;
  bool has_write_topic2() const;
  void clear_write_topic2() ;
  const std::string& write_topic2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_write_topic2(Arg_&& arg, Args_... args);
  std::string* mutable_write_topic2();
  [[nodiscard]] std::string* release_write_topic2();
  void set_allocated_write_topic2(std::string* value);

  private:
  const std::string& _internal_write_topic2() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_write_topic2(const std::string& value);
  std::string* _internal_mutable_write_topic2();

  public:
  // @@protoc_insertion_point(class_scope:ActivityTestTopicConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ActivityTestTopicConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr read_topic1_;
    ::google::protobuf::internal::ArenaStringPtr write_topic2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_activity_5ftest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ActivityTestTopicConfig_class_data_;
// -------------------------------------------------------------------

class ActivityTestConfig final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ActivityTestConfig) */ {
 public:
  inline ActivityTestConfig() : ActivityTestConfig(nullptr) {}
  ~ActivityTestConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ActivityTestConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ActivityTestConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ActivityTestConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline ActivityTestConfig(const ActivityTestConfig& from) : ActivityTestConfig(nullptr, from) {}
  inline ActivityTestConfig(ActivityTestConfig&& from) noexcept
      : ActivityTestConfig(nullptr, std::move(from)) {}
  inline ActivityTestConfig& operator=(const ActivityTestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityTestConfig& operator=(ActivityTestConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivityTestConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivityTestConfig* internal_default_instance() {
    return reinterpret_cast<const ActivityTestConfig*>(
        &_ActivityTestConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ActivityTestConfig& a, ActivityTestConfig& b) { a.Swap(&b); }
  inline void Swap(ActivityTestConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityTestConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivityTestConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ActivityTestConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ActivityTestConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ActivityTestConfig& from) { ActivityTestConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ActivityTestConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ActivityTestConfig"; }

 protected:
  explicit ActivityTestConfig(::google::protobuf::Arena* arena);
  ActivityTestConfig(::google::protobuf::Arena* arena, const ActivityTestConfig& from);
  ActivityTestConfig(::google::protobuf::Arena* arena, ActivityTestConfig&& from) noexcept
      : ActivityTestConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTopicConfigFieldNumber = 1,
  };
  // optional .ActivityTestTopicConfig topic_config = 1;
  bool has_topic_config() const;
  void clear_topic_config() ;
  const ::ActivityTestTopicConfig& topic_config() const;
  [[nodiscard]] ::ActivityTestTopicConfig* release_topic_config();
  ::ActivityTestTopicConfig* mutable_topic_config();
  void set_allocated_topic_config(::ActivityTestTopicConfig* value);
  void unsafe_arena_set_allocated_topic_config(::ActivityTestTopicConfig* value);
  ::ActivityTestTopicConfig* unsafe_arena_release_topic_config();

  private:
  const ::ActivityTestTopicConfig& _internal_topic_config() const;
  ::ActivityTestTopicConfig* _internal_mutable_topic_config();

  public:
  // @@protoc_insertion_point(class_scope:ActivityTestConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ActivityTestConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::ActivityTestTopicConfig* topic_config_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_activity_5ftest_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ActivityTestConfig_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ActivityTestTopicConfig

// optional string read_topic1 = 1;
inline bool ActivityTestTopicConfig::has_read_topic1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ActivityTestTopicConfig::clear_read_topic1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.read_topic1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivityTestTopicConfig::read_topic1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ActivityTestTopicConfig.read_topic1)
  return _internal_read_topic1();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ActivityTestTopicConfig::set_read_topic1(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.read_topic1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ActivityTestTopicConfig.read_topic1)
}
inline std::string* ActivityTestTopicConfig::mutable_read_topic1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_read_topic1();
  // @@protoc_insertion_point(field_mutable:ActivityTestTopicConfig.read_topic1)
  return _s;
}
inline const std::string& ActivityTestTopicConfig::_internal_read_topic1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.read_topic1_.Get();
}
inline void ActivityTestTopicConfig::_internal_set_read_topic1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.read_topic1_.Set(value, GetArena());
}
inline std::string* ActivityTestTopicConfig::_internal_mutable_read_topic1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.read_topic1_.Mutable( GetArena());
}
inline std::string* ActivityTestTopicConfig::release_read_topic1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ActivityTestTopicConfig.read_topic1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.read_topic1_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.read_topic1_.Set("", GetArena());
  }
  return released;
}
inline void ActivityTestTopicConfig::set_allocated_read_topic1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.read_topic1_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.read_topic1_.IsDefault()) {
    _impl_.read_topic1_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityTestTopicConfig.read_topic1)
}

// optional string write_topic2 = 2;
inline bool ActivityTestTopicConfig::has_write_topic2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ActivityTestTopicConfig::clear_write_topic2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.write_topic2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ActivityTestTopicConfig::write_topic2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ActivityTestTopicConfig.write_topic2)
  return _internal_write_topic2();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ActivityTestTopicConfig::set_write_topic2(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.write_topic2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ActivityTestTopicConfig.write_topic2)
}
inline std::string* ActivityTestTopicConfig::mutable_write_topic2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_write_topic2();
  // @@protoc_insertion_point(field_mutable:ActivityTestTopicConfig.write_topic2)
  return _s;
}
inline const std::string& ActivityTestTopicConfig::_internal_write_topic2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.write_topic2_.Get();
}
inline void ActivityTestTopicConfig::_internal_set_write_topic2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.write_topic2_.Set(value, GetArena());
}
inline std::string* ActivityTestTopicConfig::_internal_mutable_write_topic2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.write_topic2_.Mutable( GetArena());
}
inline std::string* ActivityTestTopicConfig::release_write_topic2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ActivityTestTopicConfig.write_topic2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.write_topic2_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.write_topic2_.Set("", GetArena());
  }
  return released;
}
inline void ActivityTestTopicConfig::set_allocated_write_topic2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.write_topic2_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.write_topic2_.IsDefault()) {
    _impl_.write_topic2_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityTestTopicConfig.write_topic2)
}

// -------------------------------------------------------------------

// ActivityTestConfig

// optional .ActivityTestTopicConfig topic_config = 1;
inline bool ActivityTestConfig::has_topic_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topic_config_ != nullptr);
  return value;
}
inline void ActivityTestConfig::clear_topic_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.topic_config_ != nullptr) _impl_.topic_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ActivityTestTopicConfig& ActivityTestConfig::_internal_topic_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ActivityTestTopicConfig* p = _impl_.topic_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::ActivityTestTopicConfig&>(::_ActivityTestTopicConfig_default_instance_);
}
inline const ::ActivityTestTopicConfig& ActivityTestConfig::topic_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ActivityTestConfig.topic_config)
  return _internal_topic_config();
}
inline void ActivityTestConfig::unsafe_arena_set_allocated_topic_config(::ActivityTestTopicConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.topic_config_);
  }
  _impl_.topic_config_ = reinterpret_cast<::ActivityTestTopicConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ActivityTestConfig.topic_config)
}
inline ::ActivityTestTopicConfig* ActivityTestConfig::release_topic_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ActivityTestTopicConfig* released = _impl_.topic_config_;
  _impl_.topic_config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ActivityTestTopicConfig* ActivityTestConfig::unsafe_arena_release_topic_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ActivityTestConfig.topic_config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ActivityTestTopicConfig* temp = _impl_.topic_config_;
  _impl_.topic_config_ = nullptr;
  return temp;
}
inline ::ActivityTestTopicConfig* ActivityTestConfig::_internal_mutable_topic_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.topic_config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ActivityTestTopicConfig>(GetArena());
    _impl_.topic_config_ = reinterpret_cast<::ActivityTestTopicConfig*>(p);
  }
  return _impl_.topic_config_;
}
inline ::ActivityTestTopicConfig* ActivityTestConfig::mutable_topic_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ActivityTestTopicConfig* _msg = _internal_mutable_topic_config();
  // @@protoc_insertion_point(field_mutable:ActivityTestConfig.topic_config)
  return _msg;
}
inline void ActivityTestConfig::set_allocated_topic_config(::ActivityTestTopicConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.topic_config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.topic_config_ = reinterpret_cast<::ActivityTestTopicConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:ActivityTestConfig.topic_config)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // activity_5ftest_2eproto_2epb_2eh
