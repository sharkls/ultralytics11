// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: node_conf.proto
// Protobuf C++ Version: 5.30.0-dev

#ifndef node_5fconf_2eproto_2epb_2eh
#define node_5fconf_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_node_5fconf_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_node_5fconf_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_node_5fconf_2eproto;
}  // extern "C"
enum CommType : int;
extern const uint32_t CommType_internal_data_[];
class NodeConfig;
struct NodeConfigDefaultTypeInternal;
extern NodeConfigDefaultTypeInternal _NodeConfig_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull NodeConfig_class_data_;
class NodeConfs;
struct NodeConfsDefaultTypeInternal;
extern NodeConfsDefaultTypeInternal _NodeConfs_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull NodeConfs_class_data_;
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::CommType_internal_data_>
    internal::EnumTraitsImpl::value<::CommType>;
}  // namespace protobuf
}  // namespace google

enum CommType : int {
  UDP = 0,
  SHM = 1,
  DEFAULT = 2,
};

extern const uint32_t CommType_internal_data_[];
inline constexpr CommType CommType_MIN =
    static_cast<CommType>(0);
inline constexpr CommType CommType_MAX =
    static_cast<CommType>(2);
inline bool CommType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int CommType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CommType_descriptor();
template <typename T>
const std::string& CommType_Name(T value) {
  static_assert(std::is_same<T, CommType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CommType_Name().");
  return CommType_Name(static_cast<CommType>(value));
}
template <>
inline const std::string& CommType_Name(CommType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CommType_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool CommType_Parse(
    absl::string_view name, CommType* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommType>(CommType_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class NodeConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NodeConfig) */ {
 public:
  inline NodeConfig() : NodeConfig(nullptr) {}
  ~NodeConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NodeConfig* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NodeConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NodeConfig(::google::protobuf::internal::ConstantInitialized);

  inline NodeConfig(const NodeConfig& from) : NodeConfig(nullptr, from) {}
  inline NodeConfig(NodeConfig&& from) noexcept
      : NodeConfig(nullptr, std::move(from)) {}
  inline NodeConfig& operator=(const NodeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeConfig& operator=(NodeConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeConfig& default_instance() {
    return *reinterpret_cast<const NodeConfig*>(
        &_NodeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NodeConfig& a, NodeConfig& b) { a.Swap(&b); }
  inline void Swap(NodeConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeConfig* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeConfig* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NodeConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NodeConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NodeConfig& from) { NodeConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NodeConfig* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "NodeConfig"; }

 protected:
  explicit NodeConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  NodeConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const NodeConfig& from);
  NodeConfig(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, NodeConfig&& from) noexcept
      : NodeConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kWhiteListFieldNumber = 5,
    kSegmentSizeFieldNumber = 4,
    kDomainIdFieldNumber = 2,
    kCommTypeFieldNumber = 3,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_name();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_name();
  void set_allocated_name(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_name();

  public:
  // optional string white_list = 5 [default = ""];
  bool has_white_list() const;
  void clear_white_list() ;
  const std::string& white_list() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_white_list(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_white_list();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_white_list();
  void set_allocated_white_list(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_white_list() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_white_list(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_white_list();

  public:
  // optional uint32 segment_size = 4;
  bool has_segment_size() const;
  void clear_segment_size() ;
  ::uint32_t segment_size() const;
  void set_segment_size(::uint32_t value);

  private:
  ::uint32_t _internal_segment_size() const;
  void _internal_set_segment_size(::uint32_t value);

  public:
  // required uint32 domain_Id = 2 [default = 80];
  bool has_domain_id() const;
  void clear_domain_id() ;
  ::uint32_t domain_id() const;
  void set_domain_id(::uint32_t value);

  private:
  ::uint32_t _internal_domain_id() const;
  void _internal_set_domain_id(::uint32_t value);

  public:
  // optional .CommType comm_type = 3 [default = DEFAULT];
  bool has_comm_type() const;
  void clear_comm_type() ;
  ::CommType comm_type() const;
  void set_comm_type(::CommType value);

  private:
  ::CommType _internal_comm_type() const;
  void _internal_set_comm_type(::CommType value);

  public:
  // @@protoc_insertion_point(class_scope:NodeConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   1, 33,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const NodeConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr white_list_;
    ::uint32_t segment_size_;
    ::uint32_t domain_id_;
    int comm_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_node_5fconf_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull NodeConfig_class_data_;
// -------------------------------------------------------------------

class NodeConfs final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NodeConfs) */ {
 public:
  inline NodeConfs() : NodeConfs(nullptr) {}
  ~NodeConfs() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NodeConfs* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NodeConfs));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NodeConfs(::google::protobuf::internal::ConstantInitialized);

  inline NodeConfs(const NodeConfs& from) : NodeConfs(nullptr, from) {}
  inline NodeConfs(NodeConfs&& from) noexcept
      : NodeConfs(nullptr, std::move(from)) {}
  inline NodeConfs& operator=(const NodeConfs& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeConfs& operator=(NodeConfs&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeConfs& default_instance() {
    return *reinterpret_cast<const NodeConfs*>(
        &_NodeConfs_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NodeConfs& a, NodeConfs& b) { a.Swap(&b); }
  inline void Swap(NodeConfs* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeConfs* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeConfs* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NodeConfs>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NodeConfs& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NodeConfs& from) { NodeConfs::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NodeConfs* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "NodeConfs"; }

 protected:
  explicit NodeConfs(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  NodeConfs(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const NodeConfs& from);
  NodeConfs(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, NodeConfs&& from) noexcept
      : NodeConfs(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeConfFieldNumber = 1,
  };
  // repeated .NodeConfig node_conf = 1;
  int node_conf_size() const;
  private:
  int _internal_node_conf_size() const;

  public:
  void clear_node_conf() ;
  ::NodeConfig* PROTOBUF_NONNULL mutable_node_conf(int index);
  ::google::protobuf::RepeatedPtrField<::NodeConfig>* PROTOBUF_NONNULL mutable_node_conf();

  private:
  const ::google::protobuf::RepeatedPtrField<::NodeConfig>& _internal_node_conf() const;
  ::google::protobuf::RepeatedPtrField<::NodeConfig>* PROTOBUF_NONNULL _internal_mutable_node_conf();
  public:
  const ::NodeConfig& node_conf(int index) const;
  ::NodeConfig* PROTOBUF_NONNULL add_node_conf();
  const ::google::protobuf::RepeatedPtrField<::NodeConfig>& node_conf() const;
  // @@protoc_insertion_point(class_scope:NodeConfs)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const NodeConfs& from_msg);
    ::google::protobuf::RepeatedPtrField< ::NodeConfig > node_conf_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_node_5fconf_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull NodeConfs_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NodeConfig

// required string name = 1;
inline bool NodeConfig::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NodeConfig::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NodeConfig::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NodeConfig.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void NodeConfig::set_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NodeConfig.name)
}
inline std::string* PROTOBUF_NONNULL NodeConfig::mutable_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:NodeConfig.name)
  return _s;
}
inline const std::string& NodeConfig::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void NodeConfig::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL NodeConfig::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE NodeConfig::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NodeConfig.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void NodeConfig::set_allocated_name(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeConfig.name)
}

// required uint32 domain_Id = 2 [default = 80];
inline bool NodeConfig::has_domain_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NodeConfig::clear_domain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.domain_id_ = 80u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t NodeConfig::domain_id() const {
  // @@protoc_insertion_point(field_get:NodeConfig.domain_Id)
  return _internal_domain_id();
}
inline void NodeConfig::set_domain_id(::uint32_t value) {
  _internal_set_domain_id(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:NodeConfig.domain_Id)
}
inline ::uint32_t NodeConfig::_internal_domain_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.domain_id_;
}
inline void NodeConfig::_internal_set_domain_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.domain_id_ = value;
}

// optional .CommType comm_type = 3 [default = DEFAULT];
inline bool NodeConfig::has_comm_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void NodeConfig::clear_comm_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comm_type_ = 2;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::CommType NodeConfig::comm_type() const {
  // @@protoc_insertion_point(field_get:NodeConfig.comm_type)
  return _internal_comm_type();
}
inline void NodeConfig::set_comm_type(::CommType value) {
  _internal_set_comm_type(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:NodeConfig.comm_type)
}
inline ::CommType NodeConfig::_internal_comm_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::CommType>(_impl_.comm_type_);
}
inline void NodeConfig::_internal_set_comm_type(::CommType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::CommType_internal_data_));
                                          _impl_.comm_type_ = value;
}

// optional uint32 segment_size = 4;
inline bool NodeConfig::has_segment_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NodeConfig::clear_segment_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t NodeConfig::segment_size() const {
  // @@protoc_insertion_point(field_get:NodeConfig.segment_size)
  return _internal_segment_size();
}
inline void NodeConfig::set_segment_size(::uint32_t value) {
  _internal_set_segment_size(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:NodeConfig.segment_size)
}
inline ::uint32_t NodeConfig::_internal_segment_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.segment_size_;
}
inline void NodeConfig::_internal_set_segment_size(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segment_size_ = value;
}

// optional string white_list = 5 [default = ""];
inline bool NodeConfig::has_white_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NodeConfig::clear_white_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.white_list_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NodeConfig::white_list() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NodeConfig.white_list)
  return _internal_white_list();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void NodeConfig::set_white_list(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.white_list_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NodeConfig.white_list)
}
inline std::string* PROTOBUF_NONNULL NodeConfig::mutable_white_list()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_white_list();
  // @@protoc_insertion_point(field_mutable:NodeConfig.white_list)
  return _s;
}
inline const std::string& NodeConfig::_internal_white_list() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.white_list_.Get();
}
inline void NodeConfig::_internal_set_white_list(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.white_list_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL NodeConfig::_internal_mutable_white_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.white_list_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE NodeConfig::release_white_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NodeConfig.white_list)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.white_list_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.white_list_.Set("", GetArena());
  }
  return released;
}
inline void NodeConfig::set_allocated_white_list(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.white_list_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.white_list_.IsDefault()) {
    _impl_.white_list_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeConfig.white_list)
}

// -------------------------------------------------------------------

// NodeConfs

// repeated .NodeConfig node_conf = 1;
inline int NodeConfs::_internal_node_conf_size() const {
  return _internal_node_conf().size();
}
inline int NodeConfs::node_conf_size() const {
  return _internal_node_conf_size();
}
inline void NodeConfs::clear_node_conf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_conf_.Clear();
}
inline ::NodeConfig* PROTOBUF_NONNULL NodeConfs::mutable_node_conf(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:NodeConfs.node_conf)
  return _internal_mutable_node_conf()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::NodeConfig>* PROTOBUF_NONNULL NodeConfs::mutable_node_conf()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NodeConfs.node_conf)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_node_conf();
}
inline const ::NodeConfig& NodeConfs::node_conf(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NodeConfs.node_conf)
  return _internal_node_conf().Get(index);
}
inline ::NodeConfig* PROTOBUF_NONNULL NodeConfs::add_node_conf()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::NodeConfig* _add = _internal_mutable_node_conf()->Add();
  // @@protoc_insertion_point(field_add:NodeConfs.node_conf)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::NodeConfig>& NodeConfs::node_conf() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NodeConfs.node_conf)
  return _internal_node_conf();
}
inline const ::google::protobuf::RepeatedPtrField<::NodeConfig>&
NodeConfs::_internal_node_conf() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_conf_;
}
inline ::google::protobuf::RepeatedPtrField<::NodeConfig>* PROTOBUF_NONNULL
NodeConfs::_internal_mutable_node_conf() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.node_conf_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::CommType> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::CommType>() {
  return ::CommType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // node_5fconf_2eproto_2epb_2eh
