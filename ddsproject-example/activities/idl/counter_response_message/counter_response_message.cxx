// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file counter_response_message.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "counter_response_message.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




CounterResponseMessage::CounterResponseMessage()
{
}

CounterResponseMessage::~CounterResponseMessage()
{
}

CounterResponseMessage::CounterResponseMessage(
        const CounterResponseMessage& x)
{
    m_cnt = x.m_cnt;
    m_response = x.m_response;
}

CounterResponseMessage::CounterResponseMessage(
        CounterResponseMessage&& x) noexcept
{
    m_cnt = x.m_cnt;
    m_response = std::move(x.m_response);
}

CounterResponseMessage& CounterResponseMessage::operator =(
        const CounterResponseMessage& x)
{

    m_cnt = x.m_cnt;
    m_response = x.m_response;
    return *this;
}

CounterResponseMessage& CounterResponseMessage::operator =(
        CounterResponseMessage&& x) noexcept
{

    m_cnt = x.m_cnt;
    m_response = std::move(x.m_response);
    return *this;
}

bool CounterResponseMessage::operator ==(
        const CounterResponseMessage& x) const
{
    return (m_cnt == x.m_cnt &&
           m_response == x.m_response);
}

bool CounterResponseMessage::operator !=(
        const CounterResponseMessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member cnt
 * @param _cnt New value for member cnt
 */
void CounterResponseMessage::cnt(
        int32_t _cnt)
{
    m_cnt = _cnt;
}

/*!
 * @brief This function returns the value of member cnt
 * @return Value of member cnt
 */
int32_t CounterResponseMessage::cnt() const
{
    return m_cnt;
}

/*!
 * @brief This function returns a reference to member cnt
 * @return Reference to member cnt
 */
int32_t& CounterResponseMessage::cnt()
{
    return m_cnt;
}


/*!
 * @brief This function copies the value in member response
 * @param _response New value to be copied in member response
 */
void CounterResponseMessage::response(
        const std::string& _response)
{
    m_response = _response;
}

/*!
 * @brief This function moves the value in member response
 * @param _response New value to be moved in member response
 */
void CounterResponseMessage::response(
        std::string&& _response)
{
    m_response = std::move(_response);
}

/*!
 * @brief This function returns a constant reference to member response
 * @return Constant reference to member response
 */
const std::string& CounterResponseMessage::response() const
{
    return m_response;
}

/*!
 * @brief This function returns a reference to member response
 * @return Reference to member response
 */
std::string& CounterResponseMessage::response()
{
    return m_response;
}


// Include auxiliary functions like for serializing/deserializing.
#include "counter_response_messageCdrAux.ipp"

