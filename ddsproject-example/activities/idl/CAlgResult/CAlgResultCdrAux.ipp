// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CAlgResultCdrAux.ipp
 * This source file contains some declarations of CDR related functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CALGRESULTCDRAUX_IPP_
#define _FAST_DDS_GENERATED_CALGRESULTCDRAUX_IPP_

#include "CAlgResultCdrAux.hpp"

#include <fastcdr/Cdr.h>
#include <fastcdr/CdrSizeCalculator.hpp>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

namespace eprosima {
namespace fastcdr {



template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const Keypoint& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.x(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.y(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.confidence(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const Keypoint& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.x()
        << eprosima::fastcdr::MemberId(1) << data.y()
        << eprosima::fastcdr::MemberId(2) << data.confidence()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        Keypoint& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.x();
                                            break;

                                        case 1:
                                                dcdr >> data.y();
                                            break;

                                        case 2:
                                                dcdr >> data.confidence();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Keypoint& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const CObjectResult& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.strClass(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.ucSource(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.usPcTargetId(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.sXCoord(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.sYCoord(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.sZCoord(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.usLength(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                data.usWidth(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(8),
                data.usHeight(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(9),
                data.sCourseAngle(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(10),
                data.fDistance(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(11),
                data.usVideoTargetId(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(12),
                data.fVideoConfidence(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(13),
                data.fTopLeftX(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(14),
                data.fTopLeftY(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(15),
                data.fBottomRightX(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(16),
                data.fBottomRightY(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(17),
                data.ucColor(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(18),
                data.vecKeypoints(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(19),
                data.usTargetId(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(20),
                data.sSpeed(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(21),
                data.ulFirstOccurTime(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(22),
                data.uiTimeSinceUpdate(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(23),
                data.usHitNum(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(24),
                data.bDeleteFlag(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(25),
                data.usLifeCycle(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(26),
                data.ucSignFlag(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(27),
                data.usVideoInfo(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(28),
                data.usMissFrame(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(29),
                data.usFrame(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(30),
                data.usLidarFrame(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(31),
                data.fSpeedX(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(32),
                data.fSpeedY(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(33),
                data.fAcceleration(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(34),
                data.fRCS(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const CObjectResult& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.strClass()
        << eprosima::fastcdr::MemberId(1) << data.ucSource()
        << eprosima::fastcdr::MemberId(2) << data.usPcTargetId()
        << eprosima::fastcdr::MemberId(3) << data.sXCoord()
        << eprosima::fastcdr::MemberId(4) << data.sYCoord()
        << eprosima::fastcdr::MemberId(5) << data.sZCoord()
        << eprosima::fastcdr::MemberId(6) << data.usLength()
        << eprosima::fastcdr::MemberId(7) << data.usWidth()
        << eprosima::fastcdr::MemberId(8) << data.usHeight()
        << eprosima::fastcdr::MemberId(9) << data.sCourseAngle()
        << eprosima::fastcdr::MemberId(10) << data.fDistance()
        << eprosima::fastcdr::MemberId(11) << data.usVideoTargetId()
        << eprosima::fastcdr::MemberId(12) << data.fVideoConfidence()
        << eprosima::fastcdr::MemberId(13) << data.fTopLeftX()
        << eprosima::fastcdr::MemberId(14) << data.fTopLeftY()
        << eprosima::fastcdr::MemberId(15) << data.fBottomRightX()
        << eprosima::fastcdr::MemberId(16) << data.fBottomRightY()
        << eprosima::fastcdr::MemberId(17) << data.ucColor()
        << eprosima::fastcdr::MemberId(18) << data.vecKeypoints()
        << eprosima::fastcdr::MemberId(19) << data.usTargetId()
        << eprosima::fastcdr::MemberId(20) << data.sSpeed()
        << eprosima::fastcdr::MemberId(21) << data.ulFirstOccurTime()
        << eprosima::fastcdr::MemberId(22) << data.uiTimeSinceUpdate()
        << eprosima::fastcdr::MemberId(23) << data.usHitNum()
        << eprosima::fastcdr::MemberId(24) << data.bDeleteFlag()
        << eprosima::fastcdr::MemberId(25) << data.usLifeCycle()
        << eprosima::fastcdr::MemberId(26) << data.ucSignFlag()
        << eprosima::fastcdr::MemberId(27) << data.usVideoInfo()
        << eprosima::fastcdr::MemberId(28) << data.usMissFrame()
        << eprosima::fastcdr::MemberId(29) << data.usFrame()
        << eprosima::fastcdr::MemberId(30) << data.usLidarFrame()
        << eprosima::fastcdr::MemberId(31) << data.fSpeedX()
        << eprosima::fastcdr::MemberId(32) << data.fSpeedY()
        << eprosima::fastcdr::MemberId(33) << data.fAcceleration()
        << eprosima::fastcdr::MemberId(34) << data.fRCS()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        CObjectResult& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.strClass();
                                            break;

                                        case 1:
                                                dcdr >> data.ucSource();
                                            break;

                                        case 2:
                                                dcdr >> data.usPcTargetId();
                                            break;

                                        case 3:
                                                dcdr >> data.sXCoord();
                                            break;

                                        case 4:
                                                dcdr >> data.sYCoord();
                                            break;

                                        case 5:
                                                dcdr >> data.sZCoord();
                                            break;

                                        case 6:
                                                dcdr >> data.usLength();
                                            break;

                                        case 7:
                                                dcdr >> data.usWidth();
                                            break;

                                        case 8:
                                                dcdr >> data.usHeight();
                                            break;

                                        case 9:
                                                dcdr >> data.sCourseAngle();
                                            break;

                                        case 10:
                                                dcdr >> data.fDistance();
                                            break;

                                        case 11:
                                                dcdr >> data.usVideoTargetId();
                                            break;

                                        case 12:
                                                dcdr >> data.fVideoConfidence();
                                            break;

                                        case 13:
                                                dcdr >> data.fTopLeftX();
                                            break;

                                        case 14:
                                                dcdr >> data.fTopLeftY();
                                            break;

                                        case 15:
                                                dcdr >> data.fBottomRightX();
                                            break;

                                        case 16:
                                                dcdr >> data.fBottomRightY();
                                            break;

                                        case 17:
                                                dcdr >> data.ucColor();
                                            break;

                                        case 18:
                                                dcdr >> data.vecKeypoints();
                                            break;

                                        case 19:
                                                dcdr >> data.usTargetId();
                                            break;

                                        case 20:
                                                dcdr >> data.sSpeed();
                                            break;

                                        case 21:
                                                dcdr >> data.ulFirstOccurTime();
                                            break;

                                        case 22:
                                                dcdr >> data.uiTimeSinceUpdate();
                                            break;

                                        case 23:
                                                dcdr >> data.usHitNum();
                                            break;

                                        case 24:
                                                dcdr >> data.bDeleteFlag();
                                            break;

                                        case 25:
                                                dcdr >> data.usLifeCycle();
                                            break;

                                        case 26:
                                                dcdr >> data.ucSignFlag();
                                            break;

                                        case 27:
                                                dcdr >> data.usVideoInfo();
                                            break;

                                        case 28:
                                                dcdr >> data.usMissFrame();
                                            break;

                                        case 29:
                                                dcdr >> data.usFrame();
                                            break;

                                        case 30:
                                                dcdr >> data.usLidarFrame();
                                            break;

                                        case 31:
                                                dcdr >> data.fSpeedX();
                                            break;

                                        case 32:
                                                dcdr >> data.fSpeedY();
                                            break;

                                        case 33:
                                                dcdr >> data.fAcceleration();
                                            break;

                                        case 34:
                                                dcdr >> data.fRCS();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const CObjectResult& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const CFrameResult& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.eDataType(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.eDataSourceType(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.unFrameId(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.lTimeStamp(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.mapTimeStamp(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.mapDelay(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.mapFps(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                data.vecObjectResult(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(8),
                data.tCameraSupplement(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const CFrameResult& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.eDataType()
        << eprosima::fastcdr::MemberId(1) << data.eDataSourceType()
        << eprosima::fastcdr::MemberId(2) << data.unFrameId()
        << eprosima::fastcdr::MemberId(3) << data.lTimeStamp()
        << eprosima::fastcdr::MemberId(4) << data.mapTimeStamp()
        << eprosima::fastcdr::MemberId(5) << data.mapDelay()
        << eprosima::fastcdr::MemberId(6) << data.mapFps()
        << eprosima::fastcdr::MemberId(7) << data.vecObjectResult()
        << eprosima::fastcdr::MemberId(8) << data.tCameraSupplement()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        CFrameResult& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.eDataType();
                                            break;

                                        case 1:
                                                dcdr >> data.eDataSourceType();
                                            break;

                                        case 2:
                                                dcdr >> data.unFrameId();
                                            break;

                                        case 3:
                                                dcdr >> data.lTimeStamp();
                                            break;

                                        case 4:
                                                dcdr >> data.mapTimeStamp();
                                            break;

                                        case 5:
                                                dcdr >> data.mapDelay();
                                            break;

                                        case 6:
                                                dcdr >> data.mapFps();
                                            break;

                                        case 7:
                                                dcdr >> data.vecObjectResult();
                                            break;

                                        case 8:
                                                dcdr >> data.tCameraSupplement();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const CFrameResult& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}






template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const CAlgResult& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.eDataType(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.eDataSourceType(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.unFrameId(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.lTimeStamp(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.mapTimeStamp(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.mapDelay(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.mapFps(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                data.vecFrameResult(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const CAlgResult& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.eDataType()
        << eprosima::fastcdr::MemberId(1) << data.eDataSourceType()
        << eprosima::fastcdr::MemberId(2) << data.unFrameId()
        << eprosima::fastcdr::MemberId(3) << data.lTimeStamp()
        << eprosima::fastcdr::MemberId(4) << data.mapTimeStamp()
        << eprosima::fastcdr::MemberId(5) << data.mapDelay()
        << eprosima::fastcdr::MemberId(6) << data.mapFps()
        << eprosima::fastcdr::MemberId(7) << data.vecFrameResult()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        CAlgResult& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.eDataType();
                                            break;

                                        case 1:
                                                dcdr >> data.eDataSourceType();
                                            break;

                                        case 2:
                                                dcdr >> data.unFrameId();
                                            break;

                                        case 3:
                                                dcdr >> data.lTimeStamp();
                                            break;

                                        case 4:
                                                dcdr >> data.mapTimeStamp();
                                            break;

                                        case 5:
                                                dcdr >> data.mapDelay();
                                            break;

                                        case 6:
                                                dcdr >> data.mapFps();
                                            break;

                                        case 7:
                                                dcdr >> data.vecFrameResult();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const CAlgResult& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}



} // namespace fastcdr
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_CALGRESULTCDRAUX_IPP_

