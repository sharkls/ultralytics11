// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CAlgResult.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CAlgResult.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




Keypoint::Keypoint()
{
}

Keypoint::~Keypoint()
{
}

Keypoint::Keypoint(
        const Keypoint& x)
{
    m_x = x.m_x;
    m_y = x.m_y;
    m_confidence = x.m_confidence;
}

Keypoint::Keypoint(
        Keypoint&& x) noexcept
{
    m_x = x.m_x;
    m_y = x.m_y;
    m_confidence = x.m_confidence;
}

Keypoint& Keypoint::operator =(
        const Keypoint& x)
{

    m_x = x.m_x;
    m_y = x.m_y;
    m_confidence = x.m_confidence;
    return *this;
}

Keypoint& Keypoint::operator =(
        Keypoint&& x) noexcept
{

    m_x = x.m_x;
    m_y = x.m_y;
    m_confidence = x.m_confidence;
    return *this;
}

bool Keypoint::operator ==(
        const Keypoint& x) const
{
    return (m_x == x.m_x &&
           m_y == x.m_y &&
           m_confidence == x.m_confidence);
}

bool Keypoint::operator !=(
        const Keypoint& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member x
 * @param _x New value for member x
 */
void Keypoint::x(
        float _x)
{
    m_x = _x;
}

/*!
 * @brief This function returns the value of member x
 * @return Value of member x
 */
float Keypoint::x() const
{
    return m_x;
}

/*!
 * @brief This function returns a reference to member x
 * @return Reference to member x
 */
float& Keypoint::x()
{
    return m_x;
}


/*!
 * @brief This function sets a value in member y
 * @param _y New value for member y
 */
void Keypoint::y(
        float _y)
{
    m_y = _y;
}

/*!
 * @brief This function returns the value of member y
 * @return Value of member y
 */
float Keypoint::y() const
{
    return m_y;
}

/*!
 * @brief This function returns a reference to member y
 * @return Reference to member y
 */
float& Keypoint::y()
{
    return m_y;
}


/*!
 * @brief This function sets a value in member confidence
 * @param _confidence New value for member confidence
 */
void Keypoint::confidence(
        float _confidence)
{
    m_confidence = _confidence;
}

/*!
 * @brief This function returns the value of member confidence
 * @return Value of member confidence
 */
float Keypoint::confidence() const
{
    return m_confidence;
}

/*!
 * @brief This function returns a reference to member confidence
 * @return Reference to member confidence
 */
float& Keypoint::confidence()
{
    return m_confidence;
}




CObjectResult::CObjectResult()
{
}

CObjectResult::~CObjectResult()
{
}

CObjectResult::CObjectResult(
        const CObjectResult& x)
{
    m_strClass = x.m_strClass;
    m_ucSource = x.m_ucSource;
    m_usPcTargetId = x.m_usPcTargetId;
    m_sXCoord = x.m_sXCoord;
    m_sYCoord = x.m_sYCoord;
    m_sZCoord = x.m_sZCoord;
    m_usLength = x.m_usLength;
    m_usWidth = x.m_usWidth;
    m_usHeight = x.m_usHeight;
    m_sCourseAngle = x.m_sCourseAngle;
    m_fDistance = x.m_fDistance;
    m_usVideoTargetId = x.m_usVideoTargetId;
    m_fVideoConfidence = x.m_fVideoConfidence;
    m_fTopLeftX = x.m_fTopLeftX;
    m_fTopLeftY = x.m_fTopLeftY;
    m_fBottomRightX = x.m_fBottomRightX;
    m_fBottomRightY = x.m_fBottomRightY;
    m_ucColor = x.m_ucColor;
    m_vecKeypoints = x.m_vecKeypoints;
    m_usTargetId = x.m_usTargetId;
    m_sSpeed = x.m_sSpeed;
    m_ulFirstOccurTime = x.m_ulFirstOccurTime;
    m_uiTimeSinceUpdate = x.m_uiTimeSinceUpdate;
    m_usHitNum = x.m_usHitNum;
    m_bDeleteFlag = x.m_bDeleteFlag;
    m_usLifeCycle = x.m_usLifeCycle;
    m_ucSignFlag = x.m_ucSignFlag;
    m_usVideoInfo = x.m_usVideoInfo;
    m_usMissFrame = x.m_usMissFrame;
    m_usFrame = x.m_usFrame;
    m_usLidarFrame = x.m_usLidarFrame;
    m_fSpeedX = x.m_fSpeedX;
    m_fSpeedY = x.m_fSpeedY;
    m_fAcceleration = x.m_fAcceleration;
    m_fRCS = x.m_fRCS;
}

CObjectResult::CObjectResult(
        CObjectResult&& x) noexcept
{
    m_strClass = std::move(x.m_strClass);
    m_ucSource = x.m_ucSource;
    m_usPcTargetId = x.m_usPcTargetId;
    m_sXCoord = x.m_sXCoord;
    m_sYCoord = x.m_sYCoord;
    m_sZCoord = x.m_sZCoord;
    m_usLength = x.m_usLength;
    m_usWidth = x.m_usWidth;
    m_usHeight = x.m_usHeight;
    m_sCourseAngle = x.m_sCourseAngle;
    m_fDistance = x.m_fDistance;
    m_usVideoTargetId = x.m_usVideoTargetId;
    m_fVideoConfidence = x.m_fVideoConfidence;
    m_fTopLeftX = x.m_fTopLeftX;
    m_fTopLeftY = x.m_fTopLeftY;
    m_fBottomRightX = x.m_fBottomRightX;
    m_fBottomRightY = x.m_fBottomRightY;
    m_ucColor = x.m_ucColor;
    m_vecKeypoints = std::move(x.m_vecKeypoints);
    m_usTargetId = x.m_usTargetId;
    m_sSpeed = x.m_sSpeed;
    m_ulFirstOccurTime = x.m_ulFirstOccurTime;
    m_uiTimeSinceUpdate = x.m_uiTimeSinceUpdate;
    m_usHitNum = x.m_usHitNum;
    m_bDeleteFlag = x.m_bDeleteFlag;
    m_usLifeCycle = x.m_usLifeCycle;
    m_ucSignFlag = x.m_ucSignFlag;
    m_usVideoInfo = std::move(x.m_usVideoInfo);
    m_usMissFrame = x.m_usMissFrame;
    m_usFrame = x.m_usFrame;
    m_usLidarFrame = x.m_usLidarFrame;
    m_fSpeedX = x.m_fSpeedX;
    m_fSpeedY = x.m_fSpeedY;
    m_fAcceleration = x.m_fAcceleration;
    m_fRCS = x.m_fRCS;
}

CObjectResult& CObjectResult::operator =(
        const CObjectResult& x)
{

    m_strClass = x.m_strClass;
    m_ucSource = x.m_ucSource;
    m_usPcTargetId = x.m_usPcTargetId;
    m_sXCoord = x.m_sXCoord;
    m_sYCoord = x.m_sYCoord;
    m_sZCoord = x.m_sZCoord;
    m_usLength = x.m_usLength;
    m_usWidth = x.m_usWidth;
    m_usHeight = x.m_usHeight;
    m_sCourseAngle = x.m_sCourseAngle;
    m_fDistance = x.m_fDistance;
    m_usVideoTargetId = x.m_usVideoTargetId;
    m_fVideoConfidence = x.m_fVideoConfidence;
    m_fTopLeftX = x.m_fTopLeftX;
    m_fTopLeftY = x.m_fTopLeftY;
    m_fBottomRightX = x.m_fBottomRightX;
    m_fBottomRightY = x.m_fBottomRightY;
    m_ucColor = x.m_ucColor;
    m_vecKeypoints = x.m_vecKeypoints;
    m_usTargetId = x.m_usTargetId;
    m_sSpeed = x.m_sSpeed;
    m_ulFirstOccurTime = x.m_ulFirstOccurTime;
    m_uiTimeSinceUpdate = x.m_uiTimeSinceUpdate;
    m_usHitNum = x.m_usHitNum;
    m_bDeleteFlag = x.m_bDeleteFlag;
    m_usLifeCycle = x.m_usLifeCycle;
    m_ucSignFlag = x.m_ucSignFlag;
    m_usVideoInfo = x.m_usVideoInfo;
    m_usMissFrame = x.m_usMissFrame;
    m_usFrame = x.m_usFrame;
    m_usLidarFrame = x.m_usLidarFrame;
    m_fSpeedX = x.m_fSpeedX;
    m_fSpeedY = x.m_fSpeedY;
    m_fAcceleration = x.m_fAcceleration;
    m_fRCS = x.m_fRCS;
    return *this;
}

CObjectResult& CObjectResult::operator =(
        CObjectResult&& x) noexcept
{

    m_strClass = std::move(x.m_strClass);
    m_ucSource = x.m_ucSource;
    m_usPcTargetId = x.m_usPcTargetId;
    m_sXCoord = x.m_sXCoord;
    m_sYCoord = x.m_sYCoord;
    m_sZCoord = x.m_sZCoord;
    m_usLength = x.m_usLength;
    m_usWidth = x.m_usWidth;
    m_usHeight = x.m_usHeight;
    m_sCourseAngle = x.m_sCourseAngle;
    m_fDistance = x.m_fDistance;
    m_usVideoTargetId = x.m_usVideoTargetId;
    m_fVideoConfidence = x.m_fVideoConfidence;
    m_fTopLeftX = x.m_fTopLeftX;
    m_fTopLeftY = x.m_fTopLeftY;
    m_fBottomRightX = x.m_fBottomRightX;
    m_fBottomRightY = x.m_fBottomRightY;
    m_ucColor = x.m_ucColor;
    m_vecKeypoints = std::move(x.m_vecKeypoints);
    m_usTargetId = x.m_usTargetId;
    m_sSpeed = x.m_sSpeed;
    m_ulFirstOccurTime = x.m_ulFirstOccurTime;
    m_uiTimeSinceUpdate = x.m_uiTimeSinceUpdate;
    m_usHitNum = x.m_usHitNum;
    m_bDeleteFlag = x.m_bDeleteFlag;
    m_usLifeCycle = x.m_usLifeCycle;
    m_ucSignFlag = x.m_ucSignFlag;
    m_usVideoInfo = std::move(x.m_usVideoInfo);
    m_usMissFrame = x.m_usMissFrame;
    m_usFrame = x.m_usFrame;
    m_usLidarFrame = x.m_usLidarFrame;
    m_fSpeedX = x.m_fSpeedX;
    m_fSpeedY = x.m_fSpeedY;
    m_fAcceleration = x.m_fAcceleration;
    m_fRCS = x.m_fRCS;
    return *this;
}

bool CObjectResult::operator ==(
        const CObjectResult& x) const
{
    return (m_strClass == x.m_strClass &&
           m_ucSource == x.m_ucSource &&
           m_usPcTargetId == x.m_usPcTargetId &&
           m_sXCoord == x.m_sXCoord &&
           m_sYCoord == x.m_sYCoord &&
           m_sZCoord == x.m_sZCoord &&
           m_usLength == x.m_usLength &&
           m_usWidth == x.m_usWidth &&
           m_usHeight == x.m_usHeight &&
           m_sCourseAngle == x.m_sCourseAngle &&
           m_fDistance == x.m_fDistance &&
           m_usVideoTargetId == x.m_usVideoTargetId &&
           m_fVideoConfidence == x.m_fVideoConfidence &&
           m_fTopLeftX == x.m_fTopLeftX &&
           m_fTopLeftY == x.m_fTopLeftY &&
           m_fBottomRightX == x.m_fBottomRightX &&
           m_fBottomRightY == x.m_fBottomRightY &&
           m_ucColor == x.m_ucColor &&
           m_vecKeypoints == x.m_vecKeypoints &&
           m_usTargetId == x.m_usTargetId &&
           m_sSpeed == x.m_sSpeed &&
           m_ulFirstOccurTime == x.m_ulFirstOccurTime &&
           m_uiTimeSinceUpdate == x.m_uiTimeSinceUpdate &&
           m_usHitNum == x.m_usHitNum &&
           m_bDeleteFlag == x.m_bDeleteFlag &&
           m_usLifeCycle == x.m_usLifeCycle &&
           m_ucSignFlag == x.m_ucSignFlag &&
           m_usVideoInfo == x.m_usVideoInfo &&
           m_usMissFrame == x.m_usMissFrame &&
           m_usFrame == x.m_usFrame &&
           m_usLidarFrame == x.m_usLidarFrame &&
           m_fSpeedX == x.m_fSpeedX &&
           m_fSpeedY == x.m_fSpeedY &&
           m_fAcceleration == x.m_fAcceleration &&
           m_fRCS == x.m_fRCS);
}

bool CObjectResult::operator !=(
        const CObjectResult& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member strClass
 * @param _strClass New value to be copied in member strClass
 */
void CObjectResult::strClass(
        const std::string& _strClass)
{
    m_strClass = _strClass;
}

/*!
 * @brief This function moves the value in member strClass
 * @param _strClass New value to be moved in member strClass
 */
void CObjectResult::strClass(
        std::string&& _strClass)
{
    m_strClass = std::move(_strClass);
}

/*!
 * @brief This function returns a constant reference to member strClass
 * @return Constant reference to member strClass
 */
const std::string& CObjectResult::strClass() const
{
    return m_strClass;
}

/*!
 * @brief This function returns a reference to member strClass
 * @return Reference to member strClass
 */
std::string& CObjectResult::strClass()
{
    return m_strClass;
}


/*!
 * @brief This function sets a value in member ucSource
 * @param _ucSource New value for member ucSource
 */
void CObjectResult::ucSource(
        uint8_t _ucSource)
{
    m_ucSource = _ucSource;
}

/*!
 * @brief This function returns the value of member ucSource
 * @return Value of member ucSource
 */
uint8_t CObjectResult::ucSource() const
{
    return m_ucSource;
}

/*!
 * @brief This function returns a reference to member ucSource
 * @return Reference to member ucSource
 */
uint8_t& CObjectResult::ucSource()
{
    return m_ucSource;
}


/*!
 * @brief This function sets a value in member usPcTargetId
 * @param _usPcTargetId New value for member usPcTargetId
 */
void CObjectResult::usPcTargetId(
        uint16_t _usPcTargetId)
{
    m_usPcTargetId = _usPcTargetId;
}

/*!
 * @brief This function returns the value of member usPcTargetId
 * @return Value of member usPcTargetId
 */
uint16_t CObjectResult::usPcTargetId() const
{
    return m_usPcTargetId;
}

/*!
 * @brief This function returns a reference to member usPcTargetId
 * @return Reference to member usPcTargetId
 */
uint16_t& CObjectResult::usPcTargetId()
{
    return m_usPcTargetId;
}


/*!
 * @brief This function sets a value in member sXCoord
 * @param _sXCoord New value for member sXCoord
 */
void CObjectResult::sXCoord(
        int16_t _sXCoord)
{
    m_sXCoord = _sXCoord;
}

/*!
 * @brief This function returns the value of member sXCoord
 * @return Value of member sXCoord
 */
int16_t CObjectResult::sXCoord() const
{
    return m_sXCoord;
}

/*!
 * @brief This function returns a reference to member sXCoord
 * @return Reference to member sXCoord
 */
int16_t& CObjectResult::sXCoord()
{
    return m_sXCoord;
}


/*!
 * @brief This function sets a value in member sYCoord
 * @param _sYCoord New value for member sYCoord
 */
void CObjectResult::sYCoord(
        int16_t _sYCoord)
{
    m_sYCoord = _sYCoord;
}

/*!
 * @brief This function returns the value of member sYCoord
 * @return Value of member sYCoord
 */
int16_t CObjectResult::sYCoord() const
{
    return m_sYCoord;
}

/*!
 * @brief This function returns a reference to member sYCoord
 * @return Reference to member sYCoord
 */
int16_t& CObjectResult::sYCoord()
{
    return m_sYCoord;
}


/*!
 * @brief This function sets a value in member sZCoord
 * @param _sZCoord New value for member sZCoord
 */
void CObjectResult::sZCoord(
        int16_t _sZCoord)
{
    m_sZCoord = _sZCoord;
}

/*!
 * @brief This function returns the value of member sZCoord
 * @return Value of member sZCoord
 */
int16_t CObjectResult::sZCoord() const
{
    return m_sZCoord;
}

/*!
 * @brief This function returns a reference to member sZCoord
 * @return Reference to member sZCoord
 */
int16_t& CObjectResult::sZCoord()
{
    return m_sZCoord;
}


/*!
 * @brief This function sets a value in member usLength
 * @param _usLength New value for member usLength
 */
void CObjectResult::usLength(
        uint16_t _usLength)
{
    m_usLength = _usLength;
}

/*!
 * @brief This function returns the value of member usLength
 * @return Value of member usLength
 */
uint16_t CObjectResult::usLength() const
{
    return m_usLength;
}

/*!
 * @brief This function returns a reference to member usLength
 * @return Reference to member usLength
 */
uint16_t& CObjectResult::usLength()
{
    return m_usLength;
}


/*!
 * @brief This function sets a value in member usWidth
 * @param _usWidth New value for member usWidth
 */
void CObjectResult::usWidth(
        uint16_t _usWidth)
{
    m_usWidth = _usWidth;
}

/*!
 * @brief This function returns the value of member usWidth
 * @return Value of member usWidth
 */
uint16_t CObjectResult::usWidth() const
{
    return m_usWidth;
}

/*!
 * @brief This function returns a reference to member usWidth
 * @return Reference to member usWidth
 */
uint16_t& CObjectResult::usWidth()
{
    return m_usWidth;
}


/*!
 * @brief This function sets a value in member usHeight
 * @param _usHeight New value for member usHeight
 */
void CObjectResult::usHeight(
        uint16_t _usHeight)
{
    m_usHeight = _usHeight;
}

/*!
 * @brief This function returns the value of member usHeight
 * @return Value of member usHeight
 */
uint16_t CObjectResult::usHeight() const
{
    return m_usHeight;
}

/*!
 * @brief This function returns a reference to member usHeight
 * @return Reference to member usHeight
 */
uint16_t& CObjectResult::usHeight()
{
    return m_usHeight;
}


/*!
 * @brief This function sets a value in member sCourseAngle
 * @param _sCourseAngle New value for member sCourseAngle
 */
void CObjectResult::sCourseAngle(
        int16_t _sCourseAngle)
{
    m_sCourseAngle = _sCourseAngle;
}

/*!
 * @brief This function returns the value of member sCourseAngle
 * @return Value of member sCourseAngle
 */
int16_t CObjectResult::sCourseAngle() const
{
    return m_sCourseAngle;
}

/*!
 * @brief This function returns a reference to member sCourseAngle
 * @return Reference to member sCourseAngle
 */
int16_t& CObjectResult::sCourseAngle()
{
    return m_sCourseAngle;
}


/*!
 * @brief This function sets a value in member fDistance
 * @param _fDistance New value for member fDistance
 */
void CObjectResult::fDistance(
        float _fDistance)
{
    m_fDistance = _fDistance;
}

/*!
 * @brief This function returns the value of member fDistance
 * @return Value of member fDistance
 */
float CObjectResult::fDistance() const
{
    return m_fDistance;
}

/*!
 * @brief This function returns a reference to member fDistance
 * @return Reference to member fDistance
 */
float& CObjectResult::fDistance()
{
    return m_fDistance;
}


/*!
 * @brief This function sets a value in member usVideoTargetId
 * @param _usVideoTargetId New value for member usVideoTargetId
 */
void CObjectResult::usVideoTargetId(
        uint16_t _usVideoTargetId)
{
    m_usVideoTargetId = _usVideoTargetId;
}

/*!
 * @brief This function returns the value of member usVideoTargetId
 * @return Value of member usVideoTargetId
 */
uint16_t CObjectResult::usVideoTargetId() const
{
    return m_usVideoTargetId;
}

/*!
 * @brief This function returns a reference to member usVideoTargetId
 * @return Reference to member usVideoTargetId
 */
uint16_t& CObjectResult::usVideoTargetId()
{
    return m_usVideoTargetId;
}


/*!
 * @brief This function sets a value in member fVideoConfidence
 * @param _fVideoConfidence New value for member fVideoConfidence
 */
void CObjectResult::fVideoConfidence(
        float _fVideoConfidence)
{
    m_fVideoConfidence = _fVideoConfidence;
}

/*!
 * @brief This function returns the value of member fVideoConfidence
 * @return Value of member fVideoConfidence
 */
float CObjectResult::fVideoConfidence() const
{
    return m_fVideoConfidence;
}

/*!
 * @brief This function returns a reference to member fVideoConfidence
 * @return Reference to member fVideoConfidence
 */
float& CObjectResult::fVideoConfidence()
{
    return m_fVideoConfidence;
}


/*!
 * @brief This function sets a value in member fTopLeftX
 * @param _fTopLeftX New value for member fTopLeftX
 */
void CObjectResult::fTopLeftX(
        float _fTopLeftX)
{
    m_fTopLeftX = _fTopLeftX;
}

/*!
 * @brief This function returns the value of member fTopLeftX
 * @return Value of member fTopLeftX
 */
float CObjectResult::fTopLeftX() const
{
    return m_fTopLeftX;
}

/*!
 * @brief This function returns a reference to member fTopLeftX
 * @return Reference to member fTopLeftX
 */
float& CObjectResult::fTopLeftX()
{
    return m_fTopLeftX;
}


/*!
 * @brief This function sets a value in member fTopLeftY
 * @param _fTopLeftY New value for member fTopLeftY
 */
void CObjectResult::fTopLeftY(
        float _fTopLeftY)
{
    m_fTopLeftY = _fTopLeftY;
}

/*!
 * @brief This function returns the value of member fTopLeftY
 * @return Value of member fTopLeftY
 */
float CObjectResult::fTopLeftY() const
{
    return m_fTopLeftY;
}

/*!
 * @brief This function returns a reference to member fTopLeftY
 * @return Reference to member fTopLeftY
 */
float& CObjectResult::fTopLeftY()
{
    return m_fTopLeftY;
}


/*!
 * @brief This function sets a value in member fBottomRightX
 * @param _fBottomRightX New value for member fBottomRightX
 */
void CObjectResult::fBottomRightX(
        float _fBottomRightX)
{
    m_fBottomRightX = _fBottomRightX;
}

/*!
 * @brief This function returns the value of member fBottomRightX
 * @return Value of member fBottomRightX
 */
float CObjectResult::fBottomRightX() const
{
    return m_fBottomRightX;
}

/*!
 * @brief This function returns a reference to member fBottomRightX
 * @return Reference to member fBottomRightX
 */
float& CObjectResult::fBottomRightX()
{
    return m_fBottomRightX;
}


/*!
 * @brief This function sets a value in member fBottomRightY
 * @param _fBottomRightY New value for member fBottomRightY
 */
void CObjectResult::fBottomRightY(
        float _fBottomRightY)
{
    m_fBottomRightY = _fBottomRightY;
}

/*!
 * @brief This function returns the value of member fBottomRightY
 * @return Value of member fBottomRightY
 */
float CObjectResult::fBottomRightY() const
{
    return m_fBottomRightY;
}

/*!
 * @brief This function returns a reference to member fBottomRightY
 * @return Reference to member fBottomRightY
 */
float& CObjectResult::fBottomRightY()
{
    return m_fBottomRightY;
}


/*!
 * @brief This function sets a value in member ucColor
 * @param _ucColor New value for member ucColor
 */
void CObjectResult::ucColor(
        uint8_t _ucColor)
{
    m_ucColor = _ucColor;
}

/*!
 * @brief This function returns the value of member ucColor
 * @return Value of member ucColor
 */
uint8_t CObjectResult::ucColor() const
{
    return m_ucColor;
}

/*!
 * @brief This function returns a reference to member ucColor
 * @return Reference to member ucColor
 */
uint8_t& CObjectResult::ucColor()
{
    return m_ucColor;
}


/*!
 * @brief This function copies the value in member vecKeypoints
 * @param _vecKeypoints New value to be copied in member vecKeypoints
 */
void CObjectResult::vecKeypoints(
        const std::vector<Keypoint>& _vecKeypoints)
{
    m_vecKeypoints = _vecKeypoints;
}

/*!
 * @brief This function moves the value in member vecKeypoints
 * @param _vecKeypoints New value to be moved in member vecKeypoints
 */
void CObjectResult::vecKeypoints(
        std::vector<Keypoint>&& _vecKeypoints)
{
    m_vecKeypoints = std::move(_vecKeypoints);
}

/*!
 * @brief This function returns a constant reference to member vecKeypoints
 * @return Constant reference to member vecKeypoints
 */
const std::vector<Keypoint>& CObjectResult::vecKeypoints() const
{
    return m_vecKeypoints;
}

/*!
 * @brief This function returns a reference to member vecKeypoints
 * @return Reference to member vecKeypoints
 */
std::vector<Keypoint>& CObjectResult::vecKeypoints()
{
    return m_vecKeypoints;
}


/*!
 * @brief This function sets a value in member usTargetId
 * @param _usTargetId New value for member usTargetId
 */
void CObjectResult::usTargetId(
        uint16_t _usTargetId)
{
    m_usTargetId = _usTargetId;
}

/*!
 * @brief This function returns the value of member usTargetId
 * @return Value of member usTargetId
 */
uint16_t CObjectResult::usTargetId() const
{
    return m_usTargetId;
}

/*!
 * @brief This function returns a reference to member usTargetId
 * @return Reference to member usTargetId
 */
uint16_t& CObjectResult::usTargetId()
{
    return m_usTargetId;
}


/*!
 * @brief This function sets a value in member sSpeed
 * @param _sSpeed New value for member sSpeed
 */
void CObjectResult::sSpeed(
        int16_t _sSpeed)
{
    m_sSpeed = _sSpeed;
}

/*!
 * @brief This function returns the value of member sSpeed
 * @return Value of member sSpeed
 */
int16_t CObjectResult::sSpeed() const
{
    return m_sSpeed;
}

/*!
 * @brief This function returns a reference to member sSpeed
 * @return Reference to member sSpeed
 */
int16_t& CObjectResult::sSpeed()
{
    return m_sSpeed;
}


/*!
 * @brief This function sets a value in member ulFirstOccurTime
 * @param _ulFirstOccurTime New value for member ulFirstOccurTime
 */
void CObjectResult::ulFirstOccurTime(
        uint64_t _ulFirstOccurTime)
{
    m_ulFirstOccurTime = _ulFirstOccurTime;
}

/*!
 * @brief This function returns the value of member ulFirstOccurTime
 * @return Value of member ulFirstOccurTime
 */
uint64_t CObjectResult::ulFirstOccurTime() const
{
    return m_ulFirstOccurTime;
}

/*!
 * @brief This function returns a reference to member ulFirstOccurTime
 * @return Reference to member ulFirstOccurTime
 */
uint64_t& CObjectResult::ulFirstOccurTime()
{
    return m_ulFirstOccurTime;
}


/*!
 * @brief This function sets a value in member uiTimeSinceUpdate
 * @param _uiTimeSinceUpdate New value for member uiTimeSinceUpdate
 */
void CObjectResult::uiTimeSinceUpdate(
        uint32_t _uiTimeSinceUpdate)
{
    m_uiTimeSinceUpdate = _uiTimeSinceUpdate;
}

/*!
 * @brief This function returns the value of member uiTimeSinceUpdate
 * @return Value of member uiTimeSinceUpdate
 */
uint32_t CObjectResult::uiTimeSinceUpdate() const
{
    return m_uiTimeSinceUpdate;
}

/*!
 * @brief This function returns a reference to member uiTimeSinceUpdate
 * @return Reference to member uiTimeSinceUpdate
 */
uint32_t& CObjectResult::uiTimeSinceUpdate()
{
    return m_uiTimeSinceUpdate;
}


/*!
 * @brief This function sets a value in member usHitNum
 * @param _usHitNum New value for member usHitNum
 */
void CObjectResult::usHitNum(
        uint16_t _usHitNum)
{
    m_usHitNum = _usHitNum;
}

/*!
 * @brief This function returns the value of member usHitNum
 * @return Value of member usHitNum
 */
uint16_t CObjectResult::usHitNum() const
{
    return m_usHitNum;
}

/*!
 * @brief This function returns a reference to member usHitNum
 * @return Reference to member usHitNum
 */
uint16_t& CObjectResult::usHitNum()
{
    return m_usHitNum;
}


/*!
 * @brief This function sets a value in member bDeleteFlag
 * @param _bDeleteFlag New value for member bDeleteFlag
 */
void CObjectResult::bDeleteFlag(
        bool _bDeleteFlag)
{
    m_bDeleteFlag = _bDeleteFlag;
}

/*!
 * @brief This function returns the value of member bDeleteFlag
 * @return Value of member bDeleteFlag
 */
bool CObjectResult::bDeleteFlag() const
{
    return m_bDeleteFlag;
}

/*!
 * @brief This function returns a reference to member bDeleteFlag
 * @return Reference to member bDeleteFlag
 */
bool& CObjectResult::bDeleteFlag()
{
    return m_bDeleteFlag;
}


/*!
 * @brief This function sets a value in member usLifeCycle
 * @param _usLifeCycle New value for member usLifeCycle
 */
void CObjectResult::usLifeCycle(
        uint16_t _usLifeCycle)
{
    m_usLifeCycle = _usLifeCycle;
}

/*!
 * @brief This function returns the value of member usLifeCycle
 * @return Value of member usLifeCycle
 */
uint16_t CObjectResult::usLifeCycle() const
{
    return m_usLifeCycle;
}

/*!
 * @brief This function returns a reference to member usLifeCycle
 * @return Reference to member usLifeCycle
 */
uint16_t& CObjectResult::usLifeCycle()
{
    return m_usLifeCycle;
}


/*!
 * @brief This function sets a value in member ucSignFlag
 * @param _ucSignFlag New value for member ucSignFlag
 */
void CObjectResult::ucSignFlag(
        uint16_t _ucSignFlag)
{
    m_ucSignFlag = _ucSignFlag;
}

/*!
 * @brief This function returns the value of member ucSignFlag
 * @return Value of member ucSignFlag
 */
uint16_t CObjectResult::ucSignFlag() const
{
    return m_ucSignFlag;
}

/*!
 * @brief This function returns a reference to member ucSignFlag
 * @return Reference to member ucSignFlag
 */
uint16_t& CObjectResult::ucSignFlag()
{
    return m_ucSignFlag;
}


/*!
 * @brief This function copies the value in member usVideoInfo
 * @param _usVideoInfo New value to be copied in member usVideoInfo
 */
void CObjectResult::usVideoInfo(
        const std::array<uint16_t, 20>& _usVideoInfo)
{
    m_usVideoInfo = _usVideoInfo;
}

/*!
 * @brief This function moves the value in member usVideoInfo
 * @param _usVideoInfo New value to be moved in member usVideoInfo
 */
void CObjectResult::usVideoInfo(
        std::array<uint16_t, 20>&& _usVideoInfo)
{
    m_usVideoInfo = std::move(_usVideoInfo);
}

/*!
 * @brief This function returns a constant reference to member usVideoInfo
 * @return Constant reference to member usVideoInfo
 */
const std::array<uint16_t, 20>& CObjectResult::usVideoInfo() const
{
    return m_usVideoInfo;
}

/*!
 * @brief This function returns a reference to member usVideoInfo
 * @return Reference to member usVideoInfo
 */
std::array<uint16_t, 20>& CObjectResult::usVideoInfo()
{
    return m_usVideoInfo;
}


/*!
 * @brief This function sets a value in member usMissFrame
 * @param _usMissFrame New value for member usMissFrame
 */
void CObjectResult::usMissFrame(
        uint16_t _usMissFrame)
{
    m_usMissFrame = _usMissFrame;
}

/*!
 * @brief This function returns the value of member usMissFrame
 * @return Value of member usMissFrame
 */
uint16_t CObjectResult::usMissFrame() const
{
    return m_usMissFrame;
}

/*!
 * @brief This function returns a reference to member usMissFrame
 * @return Reference to member usMissFrame
 */
uint16_t& CObjectResult::usMissFrame()
{
    return m_usMissFrame;
}


/*!
 * @brief This function sets a value in member usFrame
 * @param _usFrame New value for member usFrame
 */
void CObjectResult::usFrame(
        uint16_t _usFrame)
{
    m_usFrame = _usFrame;
}

/*!
 * @brief This function returns the value of member usFrame
 * @return Value of member usFrame
 */
uint16_t CObjectResult::usFrame() const
{
    return m_usFrame;
}

/*!
 * @brief This function returns a reference to member usFrame
 * @return Reference to member usFrame
 */
uint16_t& CObjectResult::usFrame()
{
    return m_usFrame;
}


/*!
 * @brief This function sets a value in member usLidarFrame
 * @param _usLidarFrame New value for member usLidarFrame
 */
void CObjectResult::usLidarFrame(
        uint16_t _usLidarFrame)
{
    m_usLidarFrame = _usLidarFrame;
}

/*!
 * @brief This function returns the value of member usLidarFrame
 * @return Value of member usLidarFrame
 */
uint16_t CObjectResult::usLidarFrame() const
{
    return m_usLidarFrame;
}

/*!
 * @brief This function returns a reference to member usLidarFrame
 * @return Reference to member usLidarFrame
 */
uint16_t& CObjectResult::usLidarFrame()
{
    return m_usLidarFrame;
}


/*!
 * @brief This function sets a value in member fSpeedX
 * @param _fSpeedX New value for member fSpeedX
 */
void CObjectResult::fSpeedX(
        float _fSpeedX)
{
    m_fSpeedX = _fSpeedX;
}

/*!
 * @brief This function returns the value of member fSpeedX
 * @return Value of member fSpeedX
 */
float CObjectResult::fSpeedX() const
{
    return m_fSpeedX;
}

/*!
 * @brief This function returns a reference to member fSpeedX
 * @return Reference to member fSpeedX
 */
float& CObjectResult::fSpeedX()
{
    return m_fSpeedX;
}


/*!
 * @brief This function sets a value in member fSpeedY
 * @param _fSpeedY New value for member fSpeedY
 */
void CObjectResult::fSpeedY(
        float _fSpeedY)
{
    m_fSpeedY = _fSpeedY;
}

/*!
 * @brief This function returns the value of member fSpeedY
 * @return Value of member fSpeedY
 */
float CObjectResult::fSpeedY() const
{
    return m_fSpeedY;
}

/*!
 * @brief This function returns a reference to member fSpeedY
 * @return Reference to member fSpeedY
 */
float& CObjectResult::fSpeedY()
{
    return m_fSpeedY;
}


/*!
 * @brief This function sets a value in member fAcceleration
 * @param _fAcceleration New value for member fAcceleration
 */
void CObjectResult::fAcceleration(
        float _fAcceleration)
{
    m_fAcceleration = _fAcceleration;
}

/*!
 * @brief This function returns the value of member fAcceleration
 * @return Value of member fAcceleration
 */
float CObjectResult::fAcceleration() const
{
    return m_fAcceleration;
}

/*!
 * @brief This function returns a reference to member fAcceleration
 * @return Reference to member fAcceleration
 */
float& CObjectResult::fAcceleration()
{
    return m_fAcceleration;
}


/*!
 * @brief This function sets a value in member fRCS
 * @param _fRCS New value for member fRCS
 */
void CObjectResult::fRCS(
        float _fRCS)
{
    m_fRCS = _fRCS;
}

/*!
 * @brief This function returns the value of member fRCS
 * @return Value of member fRCS
 */
float CObjectResult::fRCS() const
{
    return m_fRCS;
}

/*!
 * @brief This function returns a reference to member fRCS
 * @return Reference to member fRCS
 */
float& CObjectResult::fRCS()
{
    return m_fRCS;
}






CFrameResult::CFrameResult()
    : CDataBase()

{
}

CFrameResult::~CFrameResult()
{
}

CFrameResult::CFrameResult(
        const CFrameResult& x)
    : CDataBase(x)

{
    m_vecObjectResult = x.m_vecObjectResult;
    m_tCameraSupplement = x.m_tCameraSupplement;
    m_vecVideoSrcData = x.m_vecVideoSrcData;
}

CFrameResult::CFrameResult(
        CFrameResult&& x) noexcept
    : CDataBase(std::move(x))

{
    m_vecObjectResult = std::move(x.m_vecObjectResult);
    m_tCameraSupplement = std::move(x.m_tCameraSupplement);
    m_vecVideoSrcData = std::move(x.m_vecVideoSrcData);
}

CFrameResult& CFrameResult::operator =(
        const CFrameResult& x)
{
    CDataBase::operator =(x);

    m_vecObjectResult = x.m_vecObjectResult;
    m_tCameraSupplement = x.m_tCameraSupplement;
    m_vecVideoSrcData = x.m_vecVideoSrcData;
    return *this;
}

CFrameResult& CFrameResult::operator =(
        CFrameResult&& x) noexcept
{
    CDataBase::operator =(std::move(x));

    m_vecObjectResult = std::move(x.m_vecObjectResult);
    m_tCameraSupplement = std::move(x.m_tCameraSupplement);
    m_vecVideoSrcData = std::move(x.m_vecVideoSrcData);
    return *this;
}

bool CFrameResult::operator ==(
        const CFrameResult& x) const
{
    if (CDataBase::operator !=(x))
        {
            return false;
        }
    return (m_vecObjectResult == x.m_vecObjectResult &&
           m_tCameraSupplement == x.m_tCameraSupplement &&
           m_vecVideoSrcData == x.m_vecVideoSrcData);
}

bool CFrameResult::operator !=(
        const CFrameResult& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member vecObjectResult
 * @param _vecObjectResult New value to be copied in member vecObjectResult
 */
void CFrameResult::vecObjectResult(
        const std::vector<CObjectResult>& _vecObjectResult)
{
    m_vecObjectResult = _vecObjectResult;
}

/*!
 * @brief This function moves the value in member vecObjectResult
 * @param _vecObjectResult New value to be moved in member vecObjectResult
 */
void CFrameResult::vecObjectResult(
        std::vector<CObjectResult>&& _vecObjectResult)
{
    m_vecObjectResult = std::move(_vecObjectResult);
}

/*!
 * @brief This function returns a constant reference to member vecObjectResult
 * @return Constant reference to member vecObjectResult
 */
const std::vector<CObjectResult>& CFrameResult::vecObjectResult() const
{
    return m_vecObjectResult;
}

/*!
 * @brief This function returns a reference to member vecObjectResult
 * @return Reference to member vecObjectResult
 */
std::vector<CObjectResult>& CFrameResult::vecObjectResult()
{
    return m_vecObjectResult;
}


/*!
 * @brief This function copies the value in member tCameraSupplement
 * @param _tCameraSupplement New value to be copied in member tCameraSupplement
 */
void CFrameResult::tCameraSupplement(
        const CDisparityResult& _tCameraSupplement)
{
    m_tCameraSupplement = _tCameraSupplement;
}

/*!
 * @brief This function moves the value in member tCameraSupplement
 * @param _tCameraSupplement New value to be moved in member tCameraSupplement
 */
void CFrameResult::tCameraSupplement(
        CDisparityResult&& _tCameraSupplement)
{
    m_tCameraSupplement = std::move(_tCameraSupplement);
}

/*!
 * @brief This function returns a constant reference to member tCameraSupplement
 * @return Constant reference to member tCameraSupplement
 */
const CDisparityResult& CFrameResult::tCameraSupplement() const
{
    return m_tCameraSupplement;
}

/*!
 * @brief This function returns a reference to member tCameraSupplement
 * @return Reference to member tCameraSupplement
 */
CDisparityResult& CFrameResult::tCameraSupplement()
{
    return m_tCameraSupplement;
}


/*!
 * @brief This function copies the value in member vecVideoSrcData
 * @param _vecVideoSrcData New value to be copied in member vecVideoSrcData
 */
void CFrameResult::vecVideoSrcData(
        const std::vector<CVideoSrcData>& _vecVideoSrcData)
{
    m_vecVideoSrcData = _vecVideoSrcData;
}

/*!
 * @brief This function moves the value in member vecVideoSrcData
 * @param _vecVideoSrcData New value to be moved in member vecVideoSrcData
 */
void CFrameResult::vecVideoSrcData(
        std::vector<CVideoSrcData>&& _vecVideoSrcData)
{
    m_vecVideoSrcData = std::move(_vecVideoSrcData);
}

/*!
 * @brief This function returns a constant reference to member vecVideoSrcData
 * @return Constant reference to member vecVideoSrcData
 */
const std::vector<CVideoSrcData>& CFrameResult::vecVideoSrcData() const
{
    return m_vecVideoSrcData;
}

/*!
 * @brief This function returns a reference to member vecVideoSrcData
 * @return Reference to member vecVideoSrcData
 */
std::vector<CVideoSrcData>& CFrameResult::vecVideoSrcData()
{
    return m_vecVideoSrcData;
}






CAlgResult::CAlgResult()
    : CDataBase()

{
}

CAlgResult::~CAlgResult()
{
}

CAlgResult::CAlgResult(
        const CAlgResult& x)
    : CDataBase(x)

{
    m_vecFrameResult = x.m_vecFrameResult;
}

CAlgResult::CAlgResult(
        CAlgResult&& x) noexcept
    : CDataBase(std::move(x))

{
    m_vecFrameResult = std::move(x.m_vecFrameResult);
}

CAlgResult& CAlgResult::operator =(
        const CAlgResult& x)
{
    CDataBase::operator =(x);

    m_vecFrameResult = x.m_vecFrameResult;
    return *this;
}

CAlgResult& CAlgResult::operator =(
        CAlgResult&& x) noexcept
{
    CDataBase::operator =(std::move(x));

    m_vecFrameResult = std::move(x.m_vecFrameResult);
    return *this;
}

bool CAlgResult::operator ==(
        const CAlgResult& x) const
{
    if (CDataBase::operator !=(x))
        {
            return false;
        }
    return (m_vecFrameResult == x.m_vecFrameResult);
}

bool CAlgResult::operator !=(
        const CAlgResult& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member vecFrameResult
 * @param _vecFrameResult New value to be copied in member vecFrameResult
 */
void CAlgResult::vecFrameResult(
        const std::vector<CFrameResult>& _vecFrameResult)
{
    m_vecFrameResult = _vecFrameResult;
}

/*!
 * @brief This function moves the value in member vecFrameResult
 * @param _vecFrameResult New value to be moved in member vecFrameResult
 */
void CAlgResult::vecFrameResult(
        std::vector<CFrameResult>&& _vecFrameResult)
{
    m_vecFrameResult = std::move(_vecFrameResult);
}

/*!
 * @brief This function returns a constant reference to member vecFrameResult
 * @return Constant reference to member vecFrameResult
 */
const std::vector<CFrameResult>& CAlgResult::vecFrameResult() const
{
    return m_vecFrameResult;
}

/*!
 * @brief This function returns a reference to member vecFrameResult
 * @return Reference to member vecFrameResult
 */
std::vector<CFrameResult>& CAlgResult::vecFrameResult()
{
    return m_vecFrameResult;
}


// Include auxiliary functions like for serializing/deserializing.
#include "CAlgResultCdrAux.ipp"

