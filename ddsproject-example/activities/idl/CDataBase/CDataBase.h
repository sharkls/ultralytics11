// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CDataBase.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CDATABASE_H_
#define _FAST_DDS_GENERATED_CDATABASE_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CDATABASE_SOURCE)
#define CDATABASE_DllAPI __declspec( dllexport )
#else
#define CDATABASE_DllAPI __declspec( dllimport )
#endif // CDATABASE_SOURCE
#else
#define CDATABASE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CDATABASE_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima







/*!
 * @brief This class represents the structure CDataBase defined by the user in the IDL file.
 * @ingroup CDataBase
 */
class CDataBase
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport CDataBase();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~CDataBase();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object CDataBase that will be copied.
     */
    eProsima_user_DllExport CDataBase(
            const CDataBase& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object CDataBase that will be copied.
     */
    eProsima_user_DllExport CDataBase(
            CDataBase&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object CDataBase that will be copied.
     */
    eProsima_user_DllExport CDataBase& operator =(
            const CDataBase& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object CDataBase that will be copied.
     */
    eProsima_user_DllExport CDataBase& operator =(
            CDataBase&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x CDataBase object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const CDataBase& x) const;

    /*!
     * @brief Comparison operator.
     * @param x CDataBase object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const CDataBase& x) const;

    /*!
     * @brief This function sets a value in member eDataType
     * @param _eDataType New value for member eDataType
     */
    eProsima_user_DllExport void eDataType(
            uint8_t _eDataType);

    /*!
     * @brief This function returns the value of member eDataType
     * @return Value of member eDataType
     */
    eProsima_user_DllExport uint8_t eDataType() const;

    /*!
     * @brief This function returns a reference to member eDataType
     * @return Reference to member eDataType
     */
    eProsima_user_DllExport uint8_t& eDataType();


    /*!
     * @brief This function sets a value in member eDataSourceType
     * @param _eDataSourceType New value for member eDataSourceType
     */
    eProsima_user_DllExport void eDataSourceType(
            uint8_t _eDataSourceType);

    /*!
     * @brief This function returns the value of member eDataSourceType
     * @return Value of member eDataSourceType
     */
    eProsima_user_DllExport uint8_t eDataSourceType() const;

    /*!
     * @brief This function returns a reference to member eDataSourceType
     * @return Reference to member eDataSourceType
     */
    eProsima_user_DllExport uint8_t& eDataSourceType();


    /*!
     * @brief This function sets a value in member unFrameId
     * @param _unFrameId New value for member unFrameId
     */
    eProsima_user_DllExport void unFrameId(
            uint32_t _unFrameId);

    /*!
     * @brief This function returns the value of member unFrameId
     * @return Value of member unFrameId
     */
    eProsima_user_DllExport uint32_t unFrameId() const;

    /*!
     * @brief This function returns a reference to member unFrameId
     * @return Reference to member unFrameId
     */
    eProsima_user_DllExport uint32_t& unFrameId();


    /*!
     * @brief This function sets a value in member lTimeStamp
     * @param _lTimeStamp New value for member lTimeStamp
     */
    eProsima_user_DllExport void lTimeStamp(
            uint64_t _lTimeStamp);

    /*!
     * @brief This function returns the value of member lTimeStamp
     * @return Value of member lTimeStamp
     */
    eProsima_user_DllExport uint64_t lTimeStamp() const;

    /*!
     * @brief This function returns a reference to member lTimeStamp
     * @return Reference to member lTimeStamp
     */
    eProsima_user_DllExport uint64_t& lTimeStamp();


    /*!
     * @brief This function copies the value in member mapTimeStamp
     * @param _mapTimeStamp New value to be copied in member mapTimeStamp
     */
    eProsima_user_DllExport void mapTimeStamp(
            const std::map<uint8_t, uint64_t>& _mapTimeStamp);

    /*!
     * @brief This function moves the value in member mapTimeStamp
     * @param _mapTimeStamp New value to be moved in member mapTimeStamp
     */
    eProsima_user_DllExport void mapTimeStamp(
            std::map<uint8_t, uint64_t>&& _mapTimeStamp);

    /*!
     * @brief This function returns a constant reference to member mapTimeStamp
     * @return Constant reference to member mapTimeStamp
     */
    eProsima_user_DllExport const std::map<uint8_t, uint64_t>& mapTimeStamp() const;

    /*!
     * @brief This function returns a reference to member mapTimeStamp
     * @return Reference to member mapTimeStamp
     */
    eProsima_user_DllExport std::map<uint8_t, uint64_t>& mapTimeStamp();


    /*!
     * @brief This function copies the value in member mapDelay
     * @param _mapDelay New value to be copied in member mapDelay
     */
    eProsima_user_DllExport void mapDelay(
            const std::map<uint8_t, uint32_t>& _mapDelay);

    /*!
     * @brief This function moves the value in member mapDelay
     * @param _mapDelay New value to be moved in member mapDelay
     */
    eProsima_user_DllExport void mapDelay(
            std::map<uint8_t, uint32_t>&& _mapDelay);

    /*!
     * @brief This function returns a constant reference to member mapDelay
     * @return Constant reference to member mapDelay
     */
    eProsima_user_DllExport const std::map<uint8_t, uint32_t>& mapDelay() const;

    /*!
     * @brief This function returns a reference to member mapDelay
     * @return Reference to member mapDelay
     */
    eProsima_user_DllExport std::map<uint8_t, uint32_t>& mapDelay();


    /*!
     * @brief This function copies the value in member mapFps
     * @param _mapFps New value to be copied in member mapFps
     */
    eProsima_user_DllExport void mapFps(
            const std::map<uint8_t, float>& _mapFps);

    /*!
     * @brief This function moves the value in member mapFps
     * @param _mapFps New value to be moved in member mapFps
     */
    eProsima_user_DllExport void mapFps(
            std::map<uint8_t, float>&& _mapFps);

    /*!
     * @brief This function returns a constant reference to member mapFps
     * @return Constant reference to member mapFps
     */
    eProsima_user_DllExport const std::map<uint8_t, float>& mapFps() const;

    /*!
     * @brief This function returns a reference to member mapFps
     * @return Reference to member mapFps
     */
    eProsima_user_DllExport std::map<uint8_t, float>& mapFps();

private:

    uint8_t m_eDataType{0};
    uint8_t m_eDataSourceType{0};
    uint32_t m_unFrameId{0};
    uint64_t m_lTimeStamp{0};
    std::map<uint8_t, uint64_t> m_mapTimeStamp;
    std::map<uint8_t, uint32_t> m_mapDelay;
    std::map<uint8_t, float> m_mapFps;

};

#endif // _FAST_DDS_GENERATED_CDATABASE_H_



