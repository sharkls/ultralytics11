// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CMultiModalSrcData.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CMultiModalSrcData.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>






CVideoSrcData::CVideoSrcData()
    : CDataBase()

{
}

CVideoSrcData::~CVideoSrcData()
{
}

CVideoSrcData::CVideoSrcData(
        const CVideoSrcData& x)
    : CDataBase(x)

{
    m_ucCameraId = x.m_ucCameraId;
    m_usBmpLength = x.m_usBmpLength;
    m_usBmpWidth = x.m_usBmpWidth;
    m_unBmpBytes = x.m_unBmpBytes;
    m_vecImageBuf = x.m_vecImageBuf;
}

CVideoSrcData::CVideoSrcData(
        CVideoSrcData&& x) noexcept
    : CDataBase(std::move(x))

{
    m_ucCameraId = x.m_ucCameraId;
    m_usBmpLength = x.m_usBmpLength;
    m_usBmpWidth = x.m_usBmpWidth;
    m_unBmpBytes = x.m_unBmpBytes;
    m_vecImageBuf = std::move(x.m_vecImageBuf);
}

CVideoSrcData& CVideoSrcData::operator =(
        const CVideoSrcData& x)
{
    CDataBase::operator =(x);

    m_ucCameraId = x.m_ucCameraId;
    m_usBmpLength = x.m_usBmpLength;
    m_usBmpWidth = x.m_usBmpWidth;
    m_unBmpBytes = x.m_unBmpBytes;
    m_vecImageBuf = x.m_vecImageBuf;
    return *this;
}

CVideoSrcData& CVideoSrcData::operator =(
        CVideoSrcData&& x) noexcept
{
    CDataBase::operator =(std::move(x));

    m_ucCameraId = x.m_ucCameraId;
    m_usBmpLength = x.m_usBmpLength;
    m_usBmpWidth = x.m_usBmpWidth;
    m_unBmpBytes = x.m_unBmpBytes;
    m_vecImageBuf = std::move(x.m_vecImageBuf);
    return *this;
}

bool CVideoSrcData::operator ==(
        const CVideoSrcData& x) const
{
    if (CDataBase::operator !=(x))
        {
            return false;
        }
    return (m_ucCameraId == x.m_ucCameraId &&
           m_usBmpLength == x.m_usBmpLength &&
           m_usBmpWidth == x.m_usBmpWidth &&
           m_unBmpBytes == x.m_unBmpBytes &&
           m_vecImageBuf == x.m_vecImageBuf);
}

bool CVideoSrcData::operator !=(
        const CVideoSrcData& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member ucCameraId
 * @param _ucCameraId New value for member ucCameraId
 */
void CVideoSrcData::ucCameraId(
        uint8_t _ucCameraId)
{
    m_ucCameraId = _ucCameraId;
}

/*!
 * @brief This function returns the value of member ucCameraId
 * @return Value of member ucCameraId
 */
uint8_t CVideoSrcData::ucCameraId() const
{
    return m_ucCameraId;
}

/*!
 * @brief This function returns a reference to member ucCameraId
 * @return Reference to member ucCameraId
 */
uint8_t& CVideoSrcData::ucCameraId()
{
    return m_ucCameraId;
}


/*!
 * @brief This function sets a value in member usBmpLength
 * @param _usBmpLength New value for member usBmpLength
 */
void CVideoSrcData::usBmpLength(
        uint16_t _usBmpLength)
{
    m_usBmpLength = _usBmpLength;
}

/*!
 * @brief This function returns the value of member usBmpLength
 * @return Value of member usBmpLength
 */
uint16_t CVideoSrcData::usBmpLength() const
{
    return m_usBmpLength;
}

/*!
 * @brief This function returns a reference to member usBmpLength
 * @return Reference to member usBmpLength
 */
uint16_t& CVideoSrcData::usBmpLength()
{
    return m_usBmpLength;
}


/*!
 * @brief This function sets a value in member usBmpWidth
 * @param _usBmpWidth New value for member usBmpWidth
 */
void CVideoSrcData::usBmpWidth(
        uint16_t _usBmpWidth)
{
    m_usBmpWidth = _usBmpWidth;
}

/*!
 * @brief This function returns the value of member usBmpWidth
 * @return Value of member usBmpWidth
 */
uint16_t CVideoSrcData::usBmpWidth() const
{
    return m_usBmpWidth;
}

/*!
 * @brief This function returns a reference to member usBmpWidth
 * @return Reference to member usBmpWidth
 */
uint16_t& CVideoSrcData::usBmpWidth()
{
    return m_usBmpWidth;
}


/*!
 * @brief This function sets a value in member unBmpBytes
 * @param _unBmpBytes New value for member unBmpBytes
 */
void CVideoSrcData::unBmpBytes(
        uint32_t _unBmpBytes)
{
    m_unBmpBytes = _unBmpBytes;
}

/*!
 * @brief This function returns the value of member unBmpBytes
 * @return Value of member unBmpBytes
 */
uint32_t CVideoSrcData::unBmpBytes() const
{
    return m_unBmpBytes;
}

/*!
 * @brief This function returns a reference to member unBmpBytes
 * @return Reference to member unBmpBytes
 */
uint32_t& CVideoSrcData::unBmpBytes()
{
    return m_unBmpBytes;
}


/*!
 * @brief This function copies the value in member vecImageBuf
 * @param _vecImageBuf New value to be copied in member vecImageBuf
 */
void CVideoSrcData::vecImageBuf(
        const std::vector<uint8_t>& _vecImageBuf)
{
    m_vecImageBuf = _vecImageBuf;
}

/*!
 * @brief This function moves the value in member vecImageBuf
 * @param _vecImageBuf New value to be moved in member vecImageBuf
 */
void CVideoSrcData::vecImageBuf(
        std::vector<uint8_t>&& _vecImageBuf)
{
    m_vecImageBuf = std::move(_vecImageBuf);
}

/*!
 * @brief This function returns a constant reference to member vecImageBuf
 * @return Constant reference to member vecImageBuf
 */
const std::vector<uint8_t>& CVideoSrcData::vecImageBuf() const
{
    return m_vecImageBuf;
}

/*!
 * @brief This function returns a reference to member vecImageBuf
 * @return Reference to member vecImageBuf
 */
std::vector<uint8_t>& CVideoSrcData::vecImageBuf()
{
    return m_vecImageBuf;
}






CDisparityResult::CDisparityResult()
{
}

CDisparityResult::~CDisparityResult()
{
}

CDisparityResult::CDisparityResult(
        const CDisparityResult& x)
{
    m_usWidth = x.m_usWidth;
    m_usHeight = x.m_usHeight;
    m_vecDistanceInfo = x.m_vecDistanceInfo;
}

CDisparityResult::CDisparityResult(
        CDisparityResult&& x) noexcept
{
    m_usWidth = x.m_usWidth;
    m_usHeight = x.m_usHeight;
    m_vecDistanceInfo = std::move(x.m_vecDistanceInfo);
}

CDisparityResult& CDisparityResult::operator =(
        const CDisparityResult& x)
{

    m_usWidth = x.m_usWidth;
    m_usHeight = x.m_usHeight;
    m_vecDistanceInfo = x.m_vecDistanceInfo;
    return *this;
}

CDisparityResult& CDisparityResult::operator =(
        CDisparityResult&& x) noexcept
{

    m_usWidth = x.m_usWidth;
    m_usHeight = x.m_usHeight;
    m_vecDistanceInfo = std::move(x.m_vecDistanceInfo);
    return *this;
}

bool CDisparityResult::operator ==(
        const CDisparityResult& x) const
{
    return (m_usWidth == x.m_usWidth &&
           m_usHeight == x.m_usHeight &&
           m_vecDistanceInfo == x.m_vecDistanceInfo);
}

bool CDisparityResult::operator !=(
        const CDisparityResult& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member usWidth
 * @param _usWidth New value for member usWidth
 */
void CDisparityResult::usWidth(
        uint16_t _usWidth)
{
    m_usWidth = _usWidth;
}

/*!
 * @brief This function returns the value of member usWidth
 * @return Value of member usWidth
 */
uint16_t CDisparityResult::usWidth() const
{
    return m_usWidth;
}

/*!
 * @brief This function returns a reference to member usWidth
 * @return Reference to member usWidth
 */
uint16_t& CDisparityResult::usWidth()
{
    return m_usWidth;
}


/*!
 * @brief This function sets a value in member usHeight
 * @param _usHeight New value for member usHeight
 */
void CDisparityResult::usHeight(
        uint16_t _usHeight)
{
    m_usHeight = _usHeight;
}

/*!
 * @brief This function returns the value of member usHeight
 * @return Value of member usHeight
 */
uint16_t CDisparityResult::usHeight() const
{
    return m_usHeight;
}

/*!
 * @brief This function returns a reference to member usHeight
 * @return Reference to member usHeight
 */
uint16_t& CDisparityResult::usHeight()
{
    return m_usHeight;
}


/*!
 * @brief This function copies the value in member vecDistanceInfo
 * @param _vecDistanceInfo New value to be copied in member vecDistanceInfo
 */
void CDisparityResult::vecDistanceInfo(
        const std::vector<int32_t>& _vecDistanceInfo)
{
    m_vecDistanceInfo = _vecDistanceInfo;
}

/*!
 * @brief This function moves the value in member vecDistanceInfo
 * @param _vecDistanceInfo New value to be moved in member vecDistanceInfo
 */
void CDisparityResult::vecDistanceInfo(
        std::vector<int32_t>&& _vecDistanceInfo)
{
    m_vecDistanceInfo = std::move(_vecDistanceInfo);
}

/*!
 * @brief This function returns a constant reference to member vecDistanceInfo
 * @return Constant reference to member vecDistanceInfo
 */
const std::vector<int32_t>& CDisparityResult::vecDistanceInfo() const
{
    return m_vecDistanceInfo;
}

/*!
 * @brief This function returns a reference to member vecDistanceInfo
 * @return Reference to member vecDistanceInfo
 */
std::vector<int32_t>& CDisparityResult::vecDistanceInfo()
{
    return m_vecDistanceInfo;
}




CMultiModalSrcData::CMultiModalSrcData()
    : CDataBase()

{
}

CMultiModalSrcData::~CMultiModalSrcData()
{
}

CMultiModalSrcData::CMultiModalSrcData(
        const CMultiModalSrcData& x)
    : CDataBase(x)

{
    m_vecVideoSrcData = x.m_vecVideoSrcData;
    m_vecfHomography = x.m_vecfHomography;
    m_tDisparityResult = x.m_tDisparityResult;
}

CMultiModalSrcData::CMultiModalSrcData(
        CMultiModalSrcData&& x) noexcept
    : CDataBase(std::move(x))

{
    m_vecVideoSrcData = std::move(x.m_vecVideoSrcData);
    m_vecfHomography = std::move(x.m_vecfHomography);
    m_tDisparityResult = std::move(x.m_tDisparityResult);
}

CMultiModalSrcData& CMultiModalSrcData::operator =(
        const CMultiModalSrcData& x)
{
    CDataBase::operator =(x);

    m_vecVideoSrcData = x.m_vecVideoSrcData;
    m_vecfHomography = x.m_vecfHomography;
    m_tDisparityResult = x.m_tDisparityResult;
    return *this;
}

CMultiModalSrcData& CMultiModalSrcData::operator =(
        CMultiModalSrcData&& x) noexcept
{
    CDataBase::operator =(std::move(x));

    m_vecVideoSrcData = std::move(x.m_vecVideoSrcData);
    m_vecfHomography = std::move(x.m_vecfHomography);
    m_tDisparityResult = std::move(x.m_tDisparityResult);
    return *this;
}

bool CMultiModalSrcData::operator ==(
        const CMultiModalSrcData& x) const
{
    if (CDataBase::operator !=(x))
        {
            return false;
        }
    return (m_vecVideoSrcData == x.m_vecVideoSrcData &&
           m_vecfHomography == x.m_vecfHomography &&
           m_tDisparityResult == x.m_tDisparityResult);
}

bool CMultiModalSrcData::operator !=(
        const CMultiModalSrcData& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member vecVideoSrcData
 * @param _vecVideoSrcData New value to be copied in member vecVideoSrcData
 */
void CMultiModalSrcData::vecVideoSrcData(
        const std::vector<CVideoSrcData>& _vecVideoSrcData)
{
    m_vecVideoSrcData = _vecVideoSrcData;
}

/*!
 * @brief This function moves the value in member vecVideoSrcData
 * @param _vecVideoSrcData New value to be moved in member vecVideoSrcData
 */
void CMultiModalSrcData::vecVideoSrcData(
        std::vector<CVideoSrcData>&& _vecVideoSrcData)
{
    m_vecVideoSrcData = std::move(_vecVideoSrcData);
}

/*!
 * @brief This function returns a constant reference to member vecVideoSrcData
 * @return Constant reference to member vecVideoSrcData
 */
const std::vector<CVideoSrcData>& CMultiModalSrcData::vecVideoSrcData() const
{
    return m_vecVideoSrcData;
}

/*!
 * @brief This function returns a reference to member vecVideoSrcData
 * @return Reference to member vecVideoSrcData
 */
std::vector<CVideoSrcData>& CMultiModalSrcData::vecVideoSrcData()
{
    return m_vecVideoSrcData;
}


/*!
 * @brief This function copies the value in member vecfHomography
 * @param _vecfHomography New value to be copied in member vecfHomography
 */
void CMultiModalSrcData::vecfHomography(
        const std::vector<float>& _vecfHomography)
{
    m_vecfHomography = _vecfHomography;
}

/*!
 * @brief This function moves the value in member vecfHomography
 * @param _vecfHomography New value to be moved in member vecfHomography
 */
void CMultiModalSrcData::vecfHomography(
        std::vector<float>&& _vecfHomography)
{
    m_vecfHomography = std::move(_vecfHomography);
}

/*!
 * @brief This function returns a constant reference to member vecfHomography
 * @return Constant reference to member vecfHomography
 */
const std::vector<float>& CMultiModalSrcData::vecfHomography() const
{
    return m_vecfHomography;
}

/*!
 * @brief This function returns a reference to member vecfHomography
 * @return Reference to member vecfHomography
 */
std::vector<float>& CMultiModalSrcData::vecfHomography()
{
    return m_vecfHomography;
}


/*!
 * @brief This function copies the value in member tDisparityResult
 * @param _tDisparityResult New value to be copied in member tDisparityResult
 */
void CMultiModalSrcData::tDisparityResult(
        const CDisparityResult& _tDisparityResult)
{
    m_tDisparityResult = _tDisparityResult;
}

/*!
 * @brief This function moves the value in member tDisparityResult
 * @param _tDisparityResult New value to be moved in member tDisparityResult
 */
void CMultiModalSrcData::tDisparityResult(
        CDisparityResult&& _tDisparityResult)
{
    m_tDisparityResult = std::move(_tDisparityResult);
}

/*!
 * @brief This function returns a constant reference to member tDisparityResult
 * @return Constant reference to member tDisparityResult
 */
const CDisparityResult& CMultiModalSrcData::tDisparityResult() const
{
    return m_tDisparityResult;
}

/*!
 * @brief This function returns a reference to member tDisparityResult
 * @return Reference to member tDisparityResult
 */
CDisparityResult& CMultiModalSrcData::tDisparityResult()
{
    return m_tDisparityResult;
}


// Include auxiliary functions like for serializing/deserializing.
#include "CMultiModalSrcDataCdrAux.ipp"

