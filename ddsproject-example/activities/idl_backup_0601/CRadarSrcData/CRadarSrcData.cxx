// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CRadarSrcData.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CRadarSrcData.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




CRadarPoint::CRadarPoint()
{
}

CRadarPoint::~CRadarPoint()
{
}

CRadarPoint::CRadarPoint(
        const CRadarPoint& x)
{
    m_fRange = x.m_fRange;
    m_fAzimuth = x.m_fAzimuth;
    m_fElevation = x.m_fElevation;
    m_fDopplerVel = x.m_fDopplerVel;
    m_fRCS = x.m_fRCS;
    m_fSNR = x.m_fSNR;
    m_ucPowerLevel = x.m_ucPowerLevel;
}

CRadarPoint::CRadarPoint(
        CRadarPoint&& x) noexcept
{
    m_fRange = x.m_fRange;
    m_fAzimuth = x.m_fAzimuth;
    m_fElevation = x.m_fElevation;
    m_fDopplerVel = x.m_fDopplerVel;
    m_fRCS = x.m_fRCS;
    m_fSNR = x.m_fSNR;
    m_ucPowerLevel = x.m_ucPowerLevel;
}

CRadarPoint& CRadarPoint::operator =(
        const CRadarPoint& x)
{

    m_fRange = x.m_fRange;
    m_fAzimuth = x.m_fAzimuth;
    m_fElevation = x.m_fElevation;
    m_fDopplerVel = x.m_fDopplerVel;
    m_fRCS = x.m_fRCS;
    m_fSNR = x.m_fSNR;
    m_ucPowerLevel = x.m_ucPowerLevel;
    return *this;
}

CRadarPoint& CRadarPoint::operator =(
        CRadarPoint&& x) noexcept
{

    m_fRange = x.m_fRange;
    m_fAzimuth = x.m_fAzimuth;
    m_fElevation = x.m_fElevation;
    m_fDopplerVel = x.m_fDopplerVel;
    m_fRCS = x.m_fRCS;
    m_fSNR = x.m_fSNR;
    m_ucPowerLevel = x.m_ucPowerLevel;
    return *this;
}

bool CRadarPoint::operator ==(
        const CRadarPoint& x) const
{
    return (m_fRange == x.m_fRange &&
           m_fAzimuth == x.m_fAzimuth &&
           m_fElevation == x.m_fElevation &&
           m_fDopplerVel == x.m_fDopplerVel &&
           m_fRCS == x.m_fRCS &&
           m_fSNR == x.m_fSNR &&
           m_ucPowerLevel == x.m_ucPowerLevel);
}

bool CRadarPoint::operator !=(
        const CRadarPoint& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member fRange
 * @param _fRange New value for member fRange
 */
void CRadarPoint::fRange(
        float _fRange)
{
    m_fRange = _fRange;
}

/*!
 * @brief This function returns the value of member fRange
 * @return Value of member fRange
 */
float CRadarPoint::fRange() const
{
    return m_fRange;
}

/*!
 * @brief This function returns a reference to member fRange
 * @return Reference to member fRange
 */
float& CRadarPoint::fRange()
{
    return m_fRange;
}


/*!
 * @brief This function sets a value in member fAzimuth
 * @param _fAzimuth New value for member fAzimuth
 */
void CRadarPoint::fAzimuth(
        float _fAzimuth)
{
    m_fAzimuth = _fAzimuth;
}

/*!
 * @brief This function returns the value of member fAzimuth
 * @return Value of member fAzimuth
 */
float CRadarPoint::fAzimuth() const
{
    return m_fAzimuth;
}

/*!
 * @brief This function returns a reference to member fAzimuth
 * @return Reference to member fAzimuth
 */
float& CRadarPoint::fAzimuth()
{
    return m_fAzimuth;
}


/*!
 * @brief This function sets a value in member fElevation
 * @param _fElevation New value for member fElevation
 */
void CRadarPoint::fElevation(
        float _fElevation)
{
    m_fElevation = _fElevation;
}

/*!
 * @brief This function returns the value of member fElevation
 * @return Value of member fElevation
 */
float CRadarPoint::fElevation() const
{
    return m_fElevation;
}

/*!
 * @brief This function returns a reference to member fElevation
 * @return Reference to member fElevation
 */
float& CRadarPoint::fElevation()
{
    return m_fElevation;
}


/*!
 * @brief This function sets a value in member fDopplerVel
 * @param _fDopplerVel New value for member fDopplerVel
 */
void CRadarPoint::fDopplerVel(
        float _fDopplerVel)
{
    m_fDopplerVel = _fDopplerVel;
}

/*!
 * @brief This function returns the value of member fDopplerVel
 * @return Value of member fDopplerVel
 */
float CRadarPoint::fDopplerVel() const
{
    return m_fDopplerVel;
}

/*!
 * @brief This function returns a reference to member fDopplerVel
 * @return Reference to member fDopplerVel
 */
float& CRadarPoint::fDopplerVel()
{
    return m_fDopplerVel;
}


/*!
 * @brief This function sets a value in member fRCS
 * @param _fRCS New value for member fRCS
 */
void CRadarPoint::fRCS(
        float _fRCS)
{
    m_fRCS = _fRCS;
}

/*!
 * @brief This function returns the value of member fRCS
 * @return Value of member fRCS
 */
float CRadarPoint::fRCS() const
{
    return m_fRCS;
}

/*!
 * @brief This function returns a reference to member fRCS
 * @return Reference to member fRCS
 */
float& CRadarPoint::fRCS()
{
    return m_fRCS;
}


/*!
 * @brief This function sets a value in member fSNR
 * @param _fSNR New value for member fSNR
 */
void CRadarPoint::fSNR(
        float _fSNR)
{
    m_fSNR = _fSNR;
}

/*!
 * @brief This function returns the value of member fSNR
 * @return Value of member fSNR
 */
float CRadarPoint::fSNR() const
{
    return m_fSNR;
}

/*!
 * @brief This function returns a reference to member fSNR
 * @return Reference to member fSNR
 */
float& CRadarPoint::fSNR()
{
    return m_fSNR;
}


/*!
 * @brief This function sets a value in member ucPowerLevel
 * @param _ucPowerLevel New value for member ucPowerLevel
 */
void CRadarPoint::ucPowerLevel(
        uint8_t _ucPowerLevel)
{
    m_ucPowerLevel = _ucPowerLevel;
}

/*!
 * @brief This function returns the value of member ucPowerLevel
 * @return Value of member ucPowerLevel
 */
uint8_t CRadarPoint::ucPowerLevel() const
{
    return m_ucPowerLevel;
}

/*!
 * @brief This function returns a reference to member ucPowerLevel
 * @return Reference to member ucPowerLevel
 */
uint8_t& CRadarPoint::ucPowerLevel()
{
    return m_ucPowerLevel;
}




CRadarTrack::CRadarTrack()
{
}

CRadarTrack::~CRadarTrack()
{
}

CRadarTrack::CRadarTrack(
        const CRadarTrack& x)
{
    m_usTrackId = x.m_usTrackId;
    m_fPosX = x.m_fPosX;
    m_fPosY = x.m_fPosY;
    m_fPosZ = x.m_fPosZ;
    m_fVelX = x.m_fVelX;
    m_fVelY = x.m_fVelY;
    m_fVelZ = x.m_fVelZ;
    m_fAccX = x.m_fAccX;
    m_fAccY = x.m_fAccY;
    m_fAccZ = x.m_fAccZ;
    m_fLength = x.m_fLength;
    m_fWidth = x.m_fWidth;
    m_fHeight = x.m_fHeight;
    m_fOrientation = x.m_fOrientation;
    m_fConfidence = x.m_fConfidence;
    m_ucClassification = x.m_ucClassification;
}

CRadarTrack::CRadarTrack(
        CRadarTrack&& x) noexcept
{
    m_usTrackId = x.m_usTrackId;
    m_fPosX = x.m_fPosX;
    m_fPosY = x.m_fPosY;
    m_fPosZ = x.m_fPosZ;
    m_fVelX = x.m_fVelX;
    m_fVelY = x.m_fVelY;
    m_fVelZ = x.m_fVelZ;
    m_fAccX = x.m_fAccX;
    m_fAccY = x.m_fAccY;
    m_fAccZ = x.m_fAccZ;
    m_fLength = x.m_fLength;
    m_fWidth = x.m_fWidth;
    m_fHeight = x.m_fHeight;
    m_fOrientation = x.m_fOrientation;
    m_fConfidence = x.m_fConfidence;
    m_ucClassification = x.m_ucClassification;
}

CRadarTrack& CRadarTrack::operator =(
        const CRadarTrack& x)
{

    m_usTrackId = x.m_usTrackId;
    m_fPosX = x.m_fPosX;
    m_fPosY = x.m_fPosY;
    m_fPosZ = x.m_fPosZ;
    m_fVelX = x.m_fVelX;
    m_fVelY = x.m_fVelY;
    m_fVelZ = x.m_fVelZ;
    m_fAccX = x.m_fAccX;
    m_fAccY = x.m_fAccY;
    m_fAccZ = x.m_fAccZ;
    m_fLength = x.m_fLength;
    m_fWidth = x.m_fWidth;
    m_fHeight = x.m_fHeight;
    m_fOrientation = x.m_fOrientation;
    m_fConfidence = x.m_fConfidence;
    m_ucClassification = x.m_ucClassification;
    return *this;
}

CRadarTrack& CRadarTrack::operator =(
        CRadarTrack&& x) noexcept
{

    m_usTrackId = x.m_usTrackId;
    m_fPosX = x.m_fPosX;
    m_fPosY = x.m_fPosY;
    m_fPosZ = x.m_fPosZ;
    m_fVelX = x.m_fVelX;
    m_fVelY = x.m_fVelY;
    m_fVelZ = x.m_fVelZ;
    m_fAccX = x.m_fAccX;
    m_fAccY = x.m_fAccY;
    m_fAccZ = x.m_fAccZ;
    m_fLength = x.m_fLength;
    m_fWidth = x.m_fWidth;
    m_fHeight = x.m_fHeight;
    m_fOrientation = x.m_fOrientation;
    m_fConfidence = x.m_fConfidence;
    m_ucClassification = x.m_ucClassification;
    return *this;
}

bool CRadarTrack::operator ==(
        const CRadarTrack& x) const
{
    return (m_usTrackId == x.m_usTrackId &&
           m_fPosX == x.m_fPosX &&
           m_fPosY == x.m_fPosY &&
           m_fPosZ == x.m_fPosZ &&
           m_fVelX == x.m_fVelX &&
           m_fVelY == x.m_fVelY &&
           m_fVelZ == x.m_fVelZ &&
           m_fAccX == x.m_fAccX &&
           m_fAccY == x.m_fAccY &&
           m_fAccZ == x.m_fAccZ &&
           m_fLength == x.m_fLength &&
           m_fWidth == x.m_fWidth &&
           m_fHeight == x.m_fHeight &&
           m_fOrientation == x.m_fOrientation &&
           m_fConfidence == x.m_fConfidence &&
           m_ucClassification == x.m_ucClassification);
}

bool CRadarTrack::operator !=(
        const CRadarTrack& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member usTrackId
 * @param _usTrackId New value for member usTrackId
 */
void CRadarTrack::usTrackId(
        uint16_t _usTrackId)
{
    m_usTrackId = _usTrackId;
}

/*!
 * @brief This function returns the value of member usTrackId
 * @return Value of member usTrackId
 */
uint16_t CRadarTrack::usTrackId() const
{
    return m_usTrackId;
}

/*!
 * @brief This function returns a reference to member usTrackId
 * @return Reference to member usTrackId
 */
uint16_t& CRadarTrack::usTrackId()
{
    return m_usTrackId;
}


/*!
 * @brief This function sets a value in member fPosX
 * @param _fPosX New value for member fPosX
 */
void CRadarTrack::fPosX(
        float _fPosX)
{
    m_fPosX = _fPosX;
}

/*!
 * @brief This function returns the value of member fPosX
 * @return Value of member fPosX
 */
float CRadarTrack::fPosX() const
{
    return m_fPosX;
}

/*!
 * @brief This function returns a reference to member fPosX
 * @return Reference to member fPosX
 */
float& CRadarTrack::fPosX()
{
    return m_fPosX;
}


/*!
 * @brief This function sets a value in member fPosY
 * @param _fPosY New value for member fPosY
 */
void CRadarTrack::fPosY(
        float _fPosY)
{
    m_fPosY = _fPosY;
}

/*!
 * @brief This function returns the value of member fPosY
 * @return Value of member fPosY
 */
float CRadarTrack::fPosY() const
{
    return m_fPosY;
}

/*!
 * @brief This function returns a reference to member fPosY
 * @return Reference to member fPosY
 */
float& CRadarTrack::fPosY()
{
    return m_fPosY;
}


/*!
 * @brief This function sets a value in member fPosZ
 * @param _fPosZ New value for member fPosZ
 */
void CRadarTrack::fPosZ(
        float _fPosZ)
{
    m_fPosZ = _fPosZ;
}

/*!
 * @brief This function returns the value of member fPosZ
 * @return Value of member fPosZ
 */
float CRadarTrack::fPosZ() const
{
    return m_fPosZ;
}

/*!
 * @brief This function returns a reference to member fPosZ
 * @return Reference to member fPosZ
 */
float& CRadarTrack::fPosZ()
{
    return m_fPosZ;
}


/*!
 * @brief This function sets a value in member fVelX
 * @param _fVelX New value for member fVelX
 */
void CRadarTrack::fVelX(
        float _fVelX)
{
    m_fVelX = _fVelX;
}

/*!
 * @brief This function returns the value of member fVelX
 * @return Value of member fVelX
 */
float CRadarTrack::fVelX() const
{
    return m_fVelX;
}

/*!
 * @brief This function returns a reference to member fVelX
 * @return Reference to member fVelX
 */
float& CRadarTrack::fVelX()
{
    return m_fVelX;
}


/*!
 * @brief This function sets a value in member fVelY
 * @param _fVelY New value for member fVelY
 */
void CRadarTrack::fVelY(
        float _fVelY)
{
    m_fVelY = _fVelY;
}

/*!
 * @brief This function returns the value of member fVelY
 * @return Value of member fVelY
 */
float CRadarTrack::fVelY() const
{
    return m_fVelY;
}

/*!
 * @brief This function returns a reference to member fVelY
 * @return Reference to member fVelY
 */
float& CRadarTrack::fVelY()
{
    return m_fVelY;
}


/*!
 * @brief This function sets a value in member fVelZ
 * @param _fVelZ New value for member fVelZ
 */
void CRadarTrack::fVelZ(
        float _fVelZ)
{
    m_fVelZ = _fVelZ;
}

/*!
 * @brief This function returns the value of member fVelZ
 * @return Value of member fVelZ
 */
float CRadarTrack::fVelZ() const
{
    return m_fVelZ;
}

/*!
 * @brief This function returns a reference to member fVelZ
 * @return Reference to member fVelZ
 */
float& CRadarTrack::fVelZ()
{
    return m_fVelZ;
}


/*!
 * @brief This function sets a value in member fAccX
 * @param _fAccX New value for member fAccX
 */
void CRadarTrack::fAccX(
        float _fAccX)
{
    m_fAccX = _fAccX;
}

/*!
 * @brief This function returns the value of member fAccX
 * @return Value of member fAccX
 */
float CRadarTrack::fAccX() const
{
    return m_fAccX;
}

/*!
 * @brief This function returns a reference to member fAccX
 * @return Reference to member fAccX
 */
float& CRadarTrack::fAccX()
{
    return m_fAccX;
}


/*!
 * @brief This function sets a value in member fAccY
 * @param _fAccY New value for member fAccY
 */
void CRadarTrack::fAccY(
        float _fAccY)
{
    m_fAccY = _fAccY;
}

/*!
 * @brief This function returns the value of member fAccY
 * @return Value of member fAccY
 */
float CRadarTrack::fAccY() const
{
    return m_fAccY;
}

/*!
 * @brief This function returns a reference to member fAccY
 * @return Reference to member fAccY
 */
float& CRadarTrack::fAccY()
{
    return m_fAccY;
}


/*!
 * @brief This function sets a value in member fAccZ
 * @param _fAccZ New value for member fAccZ
 */
void CRadarTrack::fAccZ(
        float _fAccZ)
{
    m_fAccZ = _fAccZ;
}

/*!
 * @brief This function returns the value of member fAccZ
 * @return Value of member fAccZ
 */
float CRadarTrack::fAccZ() const
{
    return m_fAccZ;
}

/*!
 * @brief This function returns a reference to member fAccZ
 * @return Reference to member fAccZ
 */
float& CRadarTrack::fAccZ()
{
    return m_fAccZ;
}


/*!
 * @brief This function sets a value in member fLength
 * @param _fLength New value for member fLength
 */
void CRadarTrack::fLength(
        float _fLength)
{
    m_fLength = _fLength;
}

/*!
 * @brief This function returns the value of member fLength
 * @return Value of member fLength
 */
float CRadarTrack::fLength() const
{
    return m_fLength;
}

/*!
 * @brief This function returns a reference to member fLength
 * @return Reference to member fLength
 */
float& CRadarTrack::fLength()
{
    return m_fLength;
}


/*!
 * @brief This function sets a value in member fWidth
 * @param _fWidth New value for member fWidth
 */
void CRadarTrack::fWidth(
        float _fWidth)
{
    m_fWidth = _fWidth;
}

/*!
 * @brief This function returns the value of member fWidth
 * @return Value of member fWidth
 */
float CRadarTrack::fWidth() const
{
    return m_fWidth;
}

/*!
 * @brief This function returns a reference to member fWidth
 * @return Reference to member fWidth
 */
float& CRadarTrack::fWidth()
{
    return m_fWidth;
}


/*!
 * @brief This function sets a value in member fHeight
 * @param _fHeight New value for member fHeight
 */
void CRadarTrack::fHeight(
        float _fHeight)
{
    m_fHeight = _fHeight;
}

/*!
 * @brief This function returns the value of member fHeight
 * @return Value of member fHeight
 */
float CRadarTrack::fHeight() const
{
    return m_fHeight;
}

/*!
 * @brief This function returns a reference to member fHeight
 * @return Reference to member fHeight
 */
float& CRadarTrack::fHeight()
{
    return m_fHeight;
}


/*!
 * @brief This function sets a value in member fOrientation
 * @param _fOrientation New value for member fOrientation
 */
void CRadarTrack::fOrientation(
        float _fOrientation)
{
    m_fOrientation = _fOrientation;
}

/*!
 * @brief This function returns the value of member fOrientation
 * @return Value of member fOrientation
 */
float CRadarTrack::fOrientation() const
{
    return m_fOrientation;
}

/*!
 * @brief This function returns a reference to member fOrientation
 * @return Reference to member fOrientation
 */
float& CRadarTrack::fOrientation()
{
    return m_fOrientation;
}


/*!
 * @brief This function sets a value in member fConfidence
 * @param _fConfidence New value for member fConfidence
 */
void CRadarTrack::fConfidence(
        float _fConfidence)
{
    m_fConfidence = _fConfidence;
}

/*!
 * @brief This function returns the value of member fConfidence
 * @return Value of member fConfidence
 */
float CRadarTrack::fConfidence() const
{
    return m_fConfidence;
}

/*!
 * @brief This function returns a reference to member fConfidence
 * @return Reference to member fConfidence
 */
float& CRadarTrack::fConfidence()
{
    return m_fConfidence;
}


/*!
 * @brief This function sets a value in member ucClassification
 * @param _ucClassification New value for member ucClassification
 */
void CRadarTrack::ucClassification(
        uint8_t _ucClassification)
{
    m_ucClassification = _ucClassification;
}

/*!
 * @brief This function returns the value of member ucClassification
 * @return Value of member ucClassification
 */
uint8_t CRadarTrack::ucClassification() const
{
    return m_ucClassification;
}

/*!
 * @brief This function returns a reference to member ucClassification
 * @return Reference to member ucClassification
 */
uint8_t& CRadarTrack::ucClassification()
{
    return m_ucClassification;
}




CRadarStatus::CRadarStatus()
{
}

CRadarStatus::~CRadarStatus()
{
}

CRadarStatus::CRadarStatus(
        const CRadarStatus& x)
{
    m_ucRadarState = x.m_ucRadarState;
    m_fTemperature = x.m_fTemperature;
    m_ucBlockage = x.m_ucBlockage;
    m_ucAlignment = x.m_ucAlignment;
}

CRadarStatus::CRadarStatus(
        CRadarStatus&& x) noexcept
{
    m_ucRadarState = x.m_ucRadarState;
    m_fTemperature = x.m_fTemperature;
    m_ucBlockage = x.m_ucBlockage;
    m_ucAlignment = x.m_ucAlignment;
}

CRadarStatus& CRadarStatus::operator =(
        const CRadarStatus& x)
{

    m_ucRadarState = x.m_ucRadarState;
    m_fTemperature = x.m_fTemperature;
    m_ucBlockage = x.m_ucBlockage;
    m_ucAlignment = x.m_ucAlignment;
    return *this;
}

CRadarStatus& CRadarStatus::operator =(
        CRadarStatus&& x) noexcept
{

    m_ucRadarState = x.m_ucRadarState;
    m_fTemperature = x.m_fTemperature;
    m_ucBlockage = x.m_ucBlockage;
    m_ucAlignment = x.m_ucAlignment;
    return *this;
}

bool CRadarStatus::operator ==(
        const CRadarStatus& x) const
{
    return (m_ucRadarState == x.m_ucRadarState &&
           m_fTemperature == x.m_fTemperature &&
           m_ucBlockage == x.m_ucBlockage &&
           m_ucAlignment == x.m_ucAlignment);
}

bool CRadarStatus::operator !=(
        const CRadarStatus& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member ucRadarState
 * @param _ucRadarState New value for member ucRadarState
 */
void CRadarStatus::ucRadarState(
        uint8_t _ucRadarState)
{
    m_ucRadarState = _ucRadarState;
}

/*!
 * @brief This function returns the value of member ucRadarState
 * @return Value of member ucRadarState
 */
uint8_t CRadarStatus::ucRadarState() const
{
    return m_ucRadarState;
}

/*!
 * @brief This function returns a reference to member ucRadarState
 * @return Reference to member ucRadarState
 */
uint8_t& CRadarStatus::ucRadarState()
{
    return m_ucRadarState;
}


/*!
 * @brief This function sets a value in member fTemperature
 * @param _fTemperature New value for member fTemperature
 */
void CRadarStatus::fTemperature(
        float _fTemperature)
{
    m_fTemperature = _fTemperature;
}

/*!
 * @brief This function returns the value of member fTemperature
 * @return Value of member fTemperature
 */
float CRadarStatus::fTemperature() const
{
    return m_fTemperature;
}

/*!
 * @brief This function returns a reference to member fTemperature
 * @return Reference to member fTemperature
 */
float& CRadarStatus::fTemperature()
{
    return m_fTemperature;
}


/*!
 * @brief This function sets a value in member ucBlockage
 * @param _ucBlockage New value for member ucBlockage
 */
void CRadarStatus::ucBlockage(
        uint8_t _ucBlockage)
{
    m_ucBlockage = _ucBlockage;
}

/*!
 * @brief This function returns the value of member ucBlockage
 * @return Value of member ucBlockage
 */
uint8_t CRadarStatus::ucBlockage() const
{
    return m_ucBlockage;
}

/*!
 * @brief This function returns a reference to member ucBlockage
 * @return Reference to member ucBlockage
 */
uint8_t& CRadarStatus::ucBlockage()
{
    return m_ucBlockage;
}


/*!
 * @brief This function sets a value in member ucAlignment
 * @param _ucAlignment New value for member ucAlignment
 */
void CRadarStatus::ucAlignment(
        uint8_t _ucAlignment)
{
    m_ucAlignment = _ucAlignment;
}

/*!
 * @brief This function returns the value of member ucAlignment
 * @return Value of member ucAlignment
 */
uint8_t CRadarStatus::ucAlignment() const
{
    return m_ucAlignment;
}

/*!
 * @brief This function returns a reference to member ucAlignment
 * @return Reference to member ucAlignment
 */
uint8_t& CRadarStatus::ucAlignment()
{
    return m_ucAlignment;
}




CRadarSrcDataTimematch::CRadarSrcDataTimematch()
    : CDataBase()

{
}

CRadarSrcDataTimematch::~CRadarSrcDataTimematch()
{
}

CRadarSrcDataTimematch::CRadarSrcDataTimematch(
        const CRadarSrcDataTimematch& x)
    : CDataBase(x)

{
    m_ucRadarId = x.m_ucRadarId;
    m_tRadarStatus = x.m_tRadarStatus;
    m_vecPoints = x.m_vecPoints;
    m_vecTracks = x.m_vecTracks;
    m_fNoisePower = x.m_fNoisePower;
    m_fInterference = x.m_fInterference;
}

CRadarSrcDataTimematch::CRadarSrcDataTimematch(
        CRadarSrcDataTimematch&& x) noexcept
    : CDataBase(std::move(x))

{
    m_ucRadarId = x.m_ucRadarId;
    m_tRadarStatus = std::move(x.m_tRadarStatus);
    m_vecPoints = std::move(x.m_vecPoints);
    m_vecTracks = std::move(x.m_vecTracks);
    m_fNoisePower = x.m_fNoisePower;
    m_fInterference = x.m_fInterference;
}

CRadarSrcDataTimematch& CRadarSrcDataTimematch::operator =(
        const CRadarSrcDataTimematch& x)
{
    CDataBase::operator =(x);

    m_ucRadarId = x.m_ucRadarId;
    m_tRadarStatus = x.m_tRadarStatus;
    m_vecPoints = x.m_vecPoints;
    m_vecTracks = x.m_vecTracks;
    m_fNoisePower = x.m_fNoisePower;
    m_fInterference = x.m_fInterference;
    return *this;
}

CRadarSrcDataTimematch& CRadarSrcDataTimematch::operator =(
        CRadarSrcDataTimematch&& x) noexcept
{
    CDataBase::operator =(std::move(x));

    m_ucRadarId = x.m_ucRadarId;
    m_tRadarStatus = std::move(x.m_tRadarStatus);
    m_vecPoints = std::move(x.m_vecPoints);
    m_vecTracks = std::move(x.m_vecTracks);
    m_fNoisePower = x.m_fNoisePower;
    m_fInterference = x.m_fInterference;
    return *this;
}

bool CRadarSrcDataTimematch::operator ==(
        const CRadarSrcDataTimematch& x) const
{
    if (CDataBase::operator !=(x))
        {
            return false;
        }
    return (m_ucRadarId == x.m_ucRadarId &&
           m_tRadarStatus == x.m_tRadarStatus &&
           m_vecPoints == x.m_vecPoints &&
           m_vecTracks == x.m_vecTracks &&
           m_fNoisePower == x.m_fNoisePower &&
           m_fInterference == x.m_fInterference);
}

bool CRadarSrcDataTimematch::operator !=(
        const CRadarSrcDataTimematch& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member ucRadarId
 * @param _ucRadarId New value for member ucRadarId
 */
void CRadarSrcDataTimematch::ucRadarId(
        uint8_t _ucRadarId)
{
    m_ucRadarId = _ucRadarId;
}

/*!
 * @brief This function returns the value of member ucRadarId
 * @return Value of member ucRadarId
 */
uint8_t CRadarSrcDataTimematch::ucRadarId() const
{
    return m_ucRadarId;
}

/*!
 * @brief This function returns a reference to member ucRadarId
 * @return Reference to member ucRadarId
 */
uint8_t& CRadarSrcDataTimematch::ucRadarId()
{
    return m_ucRadarId;
}


/*!
 * @brief This function copies the value in member tRadarStatus
 * @param _tRadarStatus New value to be copied in member tRadarStatus
 */
void CRadarSrcDataTimematch::tRadarStatus(
        const CRadarStatus& _tRadarStatus)
{
    m_tRadarStatus = _tRadarStatus;
}

/*!
 * @brief This function moves the value in member tRadarStatus
 * @param _tRadarStatus New value to be moved in member tRadarStatus
 */
void CRadarSrcDataTimematch::tRadarStatus(
        CRadarStatus&& _tRadarStatus)
{
    m_tRadarStatus = std::move(_tRadarStatus);
}

/*!
 * @brief This function returns a constant reference to member tRadarStatus
 * @return Constant reference to member tRadarStatus
 */
const CRadarStatus& CRadarSrcDataTimematch::tRadarStatus() const
{
    return m_tRadarStatus;
}

/*!
 * @brief This function returns a reference to member tRadarStatus
 * @return Reference to member tRadarStatus
 */
CRadarStatus& CRadarSrcDataTimematch::tRadarStatus()
{
    return m_tRadarStatus;
}


/*!
 * @brief This function copies the value in member vecPoints
 * @param _vecPoints New value to be copied in member vecPoints
 */
void CRadarSrcDataTimematch::vecPoints(
        const std::vector<CRadarPoint>& _vecPoints)
{
    m_vecPoints = _vecPoints;
}

/*!
 * @brief This function moves the value in member vecPoints
 * @param _vecPoints New value to be moved in member vecPoints
 */
void CRadarSrcDataTimematch::vecPoints(
        std::vector<CRadarPoint>&& _vecPoints)
{
    m_vecPoints = std::move(_vecPoints);
}

/*!
 * @brief This function returns a constant reference to member vecPoints
 * @return Constant reference to member vecPoints
 */
const std::vector<CRadarPoint>& CRadarSrcDataTimematch::vecPoints() const
{
    return m_vecPoints;
}

/*!
 * @brief This function returns a reference to member vecPoints
 * @return Reference to member vecPoints
 */
std::vector<CRadarPoint>& CRadarSrcDataTimematch::vecPoints()
{
    return m_vecPoints;
}


/*!
 * @brief This function copies the value in member vecTracks
 * @param _vecTracks New value to be copied in member vecTracks
 */
void CRadarSrcDataTimematch::vecTracks(
        const std::vector<CRadarTrack>& _vecTracks)
{
    m_vecTracks = _vecTracks;
}

/*!
 * @brief This function moves the value in member vecTracks
 * @param _vecTracks New value to be moved in member vecTracks
 */
void CRadarSrcDataTimematch::vecTracks(
        std::vector<CRadarTrack>&& _vecTracks)
{
    m_vecTracks = std::move(_vecTracks);
}

/*!
 * @brief This function returns a constant reference to member vecTracks
 * @return Constant reference to member vecTracks
 */
const std::vector<CRadarTrack>& CRadarSrcDataTimematch::vecTracks() const
{
    return m_vecTracks;
}

/*!
 * @brief This function returns a reference to member vecTracks
 * @return Reference to member vecTracks
 */
std::vector<CRadarTrack>& CRadarSrcDataTimematch::vecTracks()
{
    return m_vecTracks;
}


/*!
 * @brief This function sets a value in member fNoisePower
 * @param _fNoisePower New value for member fNoisePower
 */
void CRadarSrcDataTimematch::fNoisePower(
        float _fNoisePower)
{
    m_fNoisePower = _fNoisePower;
}

/*!
 * @brief This function returns the value of member fNoisePower
 * @return Value of member fNoisePower
 */
float CRadarSrcDataTimematch::fNoisePower() const
{
    return m_fNoisePower;
}

/*!
 * @brief This function returns a reference to member fNoisePower
 * @return Reference to member fNoisePower
 */
float& CRadarSrcDataTimematch::fNoisePower()
{
    return m_fNoisePower;
}


/*!
 * @brief This function sets a value in member fInterference
 * @param _fInterference New value for member fInterference
 */
void CRadarSrcDataTimematch::fInterference(
        float _fInterference)
{
    m_fInterference = _fInterference;
}

/*!
 * @brief This function returns the value of member fInterference
 * @return Value of member fInterference
 */
float CRadarSrcDataTimematch::fInterference() const
{
    return m_fInterference;
}

/*!
 * @brief This function returns a reference to member fInterference
 * @return Reference to member fInterference
 */
float& CRadarSrcDataTimematch::fInterference()
{
    return m_fInterference;
}


// Include auxiliary functions like for serializing/deserializing.
#include "CRadarSrcDataCdrAux.ipp"

