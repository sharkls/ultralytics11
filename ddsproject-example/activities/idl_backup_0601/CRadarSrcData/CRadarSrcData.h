// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CRadarSrcData.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CRADARSRCDATA_H_
#define _FAST_DDS_GENERATED_CRADARSRCDATA_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>

#include "../CDataBase/CDataBase.h"


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CRADARSRCDATA_SOURCE)
#define CRADARSRCDATA_DllAPI __declspec( dllexport )
#else
#define CRADARSRCDATA_DllAPI __declspec( dllimport )
#endif // CRADARSRCDATA_SOURCE
#else
#define CRADARSRCDATA_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CRADARSRCDATA_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima





/*!
 * @brief This class represents the structure CRadarPoint defined by the user in the IDL file.
 * @ingroup CRadarSrcData
 */
class CRadarPoint
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport CRadarPoint();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~CRadarPoint();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object CRadarPoint that will be copied.
     */
    eProsima_user_DllExport CRadarPoint(
            const CRadarPoint& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object CRadarPoint that will be copied.
     */
    eProsima_user_DllExport CRadarPoint(
            CRadarPoint&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object CRadarPoint that will be copied.
     */
    eProsima_user_DllExport CRadarPoint& operator =(
            const CRadarPoint& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object CRadarPoint that will be copied.
     */
    eProsima_user_DllExport CRadarPoint& operator =(
            CRadarPoint&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x CRadarPoint object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const CRadarPoint& x) const;

    /*!
     * @brief Comparison operator.
     * @param x CRadarPoint object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const CRadarPoint& x) const;

    /*!
     * @brief This function sets a value in member fRange
     * @param _fRange New value for member fRange
     */
    eProsima_user_DllExport void fRange(
            float _fRange);

    /*!
     * @brief This function returns the value of member fRange
     * @return Value of member fRange
     */
    eProsima_user_DllExport float fRange() const;

    /*!
     * @brief This function returns a reference to member fRange
     * @return Reference to member fRange
     */
    eProsima_user_DllExport float& fRange();


    /*!
     * @brief This function sets a value in member fAzimuth
     * @param _fAzimuth New value for member fAzimuth
     */
    eProsima_user_DllExport void fAzimuth(
            float _fAzimuth);

    /*!
     * @brief This function returns the value of member fAzimuth
     * @return Value of member fAzimuth
     */
    eProsima_user_DllExport float fAzimuth() const;

    /*!
     * @brief This function returns a reference to member fAzimuth
     * @return Reference to member fAzimuth
     */
    eProsima_user_DllExport float& fAzimuth();


    /*!
     * @brief This function sets a value in member fElevation
     * @param _fElevation New value for member fElevation
     */
    eProsima_user_DllExport void fElevation(
            float _fElevation);

    /*!
     * @brief This function returns the value of member fElevation
     * @return Value of member fElevation
     */
    eProsima_user_DllExport float fElevation() const;

    /*!
     * @brief This function returns a reference to member fElevation
     * @return Reference to member fElevation
     */
    eProsima_user_DllExport float& fElevation();


    /*!
     * @brief This function sets a value in member fDopplerVel
     * @param _fDopplerVel New value for member fDopplerVel
     */
    eProsima_user_DllExport void fDopplerVel(
            float _fDopplerVel);

    /*!
     * @brief This function returns the value of member fDopplerVel
     * @return Value of member fDopplerVel
     */
    eProsima_user_DllExport float fDopplerVel() const;

    /*!
     * @brief This function returns a reference to member fDopplerVel
     * @return Reference to member fDopplerVel
     */
    eProsima_user_DllExport float& fDopplerVel();


    /*!
     * @brief This function sets a value in member fRCS
     * @param _fRCS New value for member fRCS
     */
    eProsima_user_DllExport void fRCS(
            float _fRCS);

    /*!
     * @brief This function returns the value of member fRCS
     * @return Value of member fRCS
     */
    eProsima_user_DllExport float fRCS() const;

    /*!
     * @brief This function returns a reference to member fRCS
     * @return Reference to member fRCS
     */
    eProsima_user_DllExport float& fRCS();


    /*!
     * @brief This function sets a value in member fSNR
     * @param _fSNR New value for member fSNR
     */
    eProsima_user_DllExport void fSNR(
            float _fSNR);

    /*!
     * @brief This function returns the value of member fSNR
     * @return Value of member fSNR
     */
    eProsima_user_DllExport float fSNR() const;

    /*!
     * @brief This function returns a reference to member fSNR
     * @return Reference to member fSNR
     */
    eProsima_user_DllExport float& fSNR();


    /*!
     * @brief This function sets a value in member ucPowerLevel
     * @param _ucPowerLevel New value for member ucPowerLevel
     */
    eProsima_user_DllExport void ucPowerLevel(
            uint8_t _ucPowerLevel);

    /*!
     * @brief This function returns the value of member ucPowerLevel
     * @return Value of member ucPowerLevel
     */
    eProsima_user_DllExport uint8_t ucPowerLevel() const;

    /*!
     * @brief This function returns a reference to member ucPowerLevel
     * @return Reference to member ucPowerLevel
     */
    eProsima_user_DllExport uint8_t& ucPowerLevel();

private:

    float m_fRange{0.0};
    float m_fAzimuth{0.0};
    float m_fElevation{0.0};
    float m_fDopplerVel{0.0};
    float m_fRCS{0.0};
    float m_fSNR{0.0};
    uint8_t m_ucPowerLevel{0};

};


/*!
 * @brief This class represents the structure CRadarTrack defined by the user in the IDL file.
 * @ingroup CRadarSrcData
 */
class CRadarTrack
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport CRadarTrack();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~CRadarTrack();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object CRadarTrack that will be copied.
     */
    eProsima_user_DllExport CRadarTrack(
            const CRadarTrack& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object CRadarTrack that will be copied.
     */
    eProsima_user_DllExport CRadarTrack(
            CRadarTrack&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object CRadarTrack that will be copied.
     */
    eProsima_user_DllExport CRadarTrack& operator =(
            const CRadarTrack& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object CRadarTrack that will be copied.
     */
    eProsima_user_DllExport CRadarTrack& operator =(
            CRadarTrack&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x CRadarTrack object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const CRadarTrack& x) const;

    /*!
     * @brief Comparison operator.
     * @param x CRadarTrack object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const CRadarTrack& x) const;

    /*!
     * @brief This function sets a value in member usTrackId
     * @param _usTrackId New value for member usTrackId
     */
    eProsima_user_DllExport void usTrackId(
            uint16_t _usTrackId);

    /*!
     * @brief This function returns the value of member usTrackId
     * @return Value of member usTrackId
     */
    eProsima_user_DllExport uint16_t usTrackId() const;

    /*!
     * @brief This function returns a reference to member usTrackId
     * @return Reference to member usTrackId
     */
    eProsima_user_DllExport uint16_t& usTrackId();


    /*!
     * @brief This function sets a value in member fPosX
     * @param _fPosX New value for member fPosX
     */
    eProsima_user_DllExport void fPosX(
            float _fPosX);

    /*!
     * @brief This function returns the value of member fPosX
     * @return Value of member fPosX
     */
    eProsima_user_DllExport float fPosX() const;

    /*!
     * @brief This function returns a reference to member fPosX
     * @return Reference to member fPosX
     */
    eProsima_user_DllExport float& fPosX();


    /*!
     * @brief This function sets a value in member fPosY
     * @param _fPosY New value for member fPosY
     */
    eProsima_user_DllExport void fPosY(
            float _fPosY);

    /*!
     * @brief This function returns the value of member fPosY
     * @return Value of member fPosY
     */
    eProsima_user_DllExport float fPosY() const;

    /*!
     * @brief This function returns a reference to member fPosY
     * @return Reference to member fPosY
     */
    eProsima_user_DllExport float& fPosY();


    /*!
     * @brief This function sets a value in member fPosZ
     * @param _fPosZ New value for member fPosZ
     */
    eProsima_user_DllExport void fPosZ(
            float _fPosZ);

    /*!
     * @brief This function returns the value of member fPosZ
     * @return Value of member fPosZ
     */
    eProsima_user_DllExport float fPosZ() const;

    /*!
     * @brief This function returns a reference to member fPosZ
     * @return Reference to member fPosZ
     */
    eProsima_user_DllExport float& fPosZ();


    /*!
     * @brief This function sets a value in member fVelX
     * @param _fVelX New value for member fVelX
     */
    eProsima_user_DllExport void fVelX(
            float _fVelX);

    /*!
     * @brief This function returns the value of member fVelX
     * @return Value of member fVelX
     */
    eProsima_user_DllExport float fVelX() const;

    /*!
     * @brief This function returns a reference to member fVelX
     * @return Reference to member fVelX
     */
    eProsima_user_DllExport float& fVelX();


    /*!
     * @brief This function sets a value in member fVelY
     * @param _fVelY New value for member fVelY
     */
    eProsima_user_DllExport void fVelY(
            float _fVelY);

    /*!
     * @brief This function returns the value of member fVelY
     * @return Value of member fVelY
     */
    eProsima_user_DllExport float fVelY() const;

    /*!
     * @brief This function returns a reference to member fVelY
     * @return Reference to member fVelY
     */
    eProsima_user_DllExport float& fVelY();


    /*!
     * @brief This function sets a value in member fVelZ
     * @param _fVelZ New value for member fVelZ
     */
    eProsima_user_DllExport void fVelZ(
            float _fVelZ);

    /*!
     * @brief This function returns the value of member fVelZ
     * @return Value of member fVelZ
     */
    eProsima_user_DllExport float fVelZ() const;

    /*!
     * @brief This function returns a reference to member fVelZ
     * @return Reference to member fVelZ
     */
    eProsima_user_DllExport float& fVelZ();


    /*!
     * @brief This function sets a value in member fAccX
     * @param _fAccX New value for member fAccX
     */
    eProsima_user_DllExport void fAccX(
            float _fAccX);

    /*!
     * @brief This function returns the value of member fAccX
     * @return Value of member fAccX
     */
    eProsima_user_DllExport float fAccX() const;

    /*!
     * @brief This function returns a reference to member fAccX
     * @return Reference to member fAccX
     */
    eProsima_user_DllExport float& fAccX();


    /*!
     * @brief This function sets a value in member fAccY
     * @param _fAccY New value for member fAccY
     */
    eProsima_user_DllExport void fAccY(
            float _fAccY);

    /*!
     * @brief This function returns the value of member fAccY
     * @return Value of member fAccY
     */
    eProsima_user_DllExport float fAccY() const;

    /*!
     * @brief This function returns a reference to member fAccY
     * @return Reference to member fAccY
     */
    eProsima_user_DllExport float& fAccY();


    /*!
     * @brief This function sets a value in member fAccZ
     * @param _fAccZ New value for member fAccZ
     */
    eProsima_user_DllExport void fAccZ(
            float _fAccZ);

    /*!
     * @brief This function returns the value of member fAccZ
     * @return Value of member fAccZ
     */
    eProsima_user_DllExport float fAccZ() const;

    /*!
     * @brief This function returns a reference to member fAccZ
     * @return Reference to member fAccZ
     */
    eProsima_user_DllExport float& fAccZ();


    /*!
     * @brief This function sets a value in member fLength
     * @param _fLength New value for member fLength
     */
    eProsima_user_DllExport void fLength(
            float _fLength);

    /*!
     * @brief This function returns the value of member fLength
     * @return Value of member fLength
     */
    eProsima_user_DllExport float fLength() const;

    /*!
     * @brief This function returns a reference to member fLength
     * @return Reference to member fLength
     */
    eProsima_user_DllExport float& fLength();


    /*!
     * @brief This function sets a value in member fWidth
     * @param _fWidth New value for member fWidth
     */
    eProsima_user_DllExport void fWidth(
            float _fWidth);

    /*!
     * @brief This function returns the value of member fWidth
     * @return Value of member fWidth
     */
    eProsima_user_DllExport float fWidth() const;

    /*!
     * @brief This function returns a reference to member fWidth
     * @return Reference to member fWidth
     */
    eProsima_user_DllExport float& fWidth();


    /*!
     * @brief This function sets a value in member fHeight
     * @param _fHeight New value for member fHeight
     */
    eProsima_user_DllExport void fHeight(
            float _fHeight);

    /*!
     * @brief This function returns the value of member fHeight
     * @return Value of member fHeight
     */
    eProsima_user_DllExport float fHeight() const;

    /*!
     * @brief This function returns a reference to member fHeight
     * @return Reference to member fHeight
     */
    eProsima_user_DllExport float& fHeight();


    /*!
     * @brief This function sets a value in member fOrientation
     * @param _fOrientation New value for member fOrientation
     */
    eProsima_user_DllExport void fOrientation(
            float _fOrientation);

    /*!
     * @brief This function returns the value of member fOrientation
     * @return Value of member fOrientation
     */
    eProsima_user_DllExport float fOrientation() const;

    /*!
     * @brief This function returns a reference to member fOrientation
     * @return Reference to member fOrientation
     */
    eProsima_user_DllExport float& fOrientation();


    /*!
     * @brief This function sets a value in member fConfidence
     * @param _fConfidence New value for member fConfidence
     */
    eProsima_user_DllExport void fConfidence(
            float _fConfidence);

    /*!
     * @brief This function returns the value of member fConfidence
     * @return Value of member fConfidence
     */
    eProsima_user_DllExport float fConfidence() const;

    /*!
     * @brief This function returns a reference to member fConfidence
     * @return Reference to member fConfidence
     */
    eProsima_user_DllExport float& fConfidence();


    /*!
     * @brief This function sets a value in member ucClassification
     * @param _ucClassification New value for member ucClassification
     */
    eProsima_user_DllExport void ucClassification(
            uint8_t _ucClassification);

    /*!
     * @brief This function returns the value of member ucClassification
     * @return Value of member ucClassification
     */
    eProsima_user_DllExport uint8_t ucClassification() const;

    /*!
     * @brief This function returns a reference to member ucClassification
     * @return Reference to member ucClassification
     */
    eProsima_user_DllExport uint8_t& ucClassification();

private:

    uint16_t m_usTrackId{0};
    float m_fPosX{0.0};
    float m_fPosY{0.0};
    float m_fPosZ{0.0};
    float m_fVelX{0.0};
    float m_fVelY{0.0};
    float m_fVelZ{0.0};
    float m_fAccX{0.0};
    float m_fAccY{0.0};
    float m_fAccZ{0.0};
    float m_fLength{0.0};
    float m_fWidth{0.0};
    float m_fHeight{0.0};
    float m_fOrientation{0.0};
    float m_fConfidence{0.0};
    uint8_t m_ucClassification{0};

};


/*!
 * @brief This class represents the structure CRadarStatus defined by the user in the IDL file.
 * @ingroup CRadarSrcData
 */
class CRadarStatus
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport CRadarStatus();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~CRadarStatus();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object CRadarStatus that will be copied.
     */
    eProsima_user_DllExport CRadarStatus(
            const CRadarStatus& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object CRadarStatus that will be copied.
     */
    eProsima_user_DllExport CRadarStatus(
            CRadarStatus&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object CRadarStatus that will be copied.
     */
    eProsima_user_DllExport CRadarStatus& operator =(
            const CRadarStatus& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object CRadarStatus that will be copied.
     */
    eProsima_user_DllExport CRadarStatus& operator =(
            CRadarStatus&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x CRadarStatus object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const CRadarStatus& x) const;

    /*!
     * @brief Comparison operator.
     * @param x CRadarStatus object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const CRadarStatus& x) const;

    /*!
     * @brief This function sets a value in member ucRadarState
     * @param _ucRadarState New value for member ucRadarState
     */
    eProsima_user_DllExport void ucRadarState(
            uint8_t _ucRadarState);

    /*!
     * @brief This function returns the value of member ucRadarState
     * @return Value of member ucRadarState
     */
    eProsima_user_DllExport uint8_t ucRadarState() const;

    /*!
     * @brief This function returns a reference to member ucRadarState
     * @return Reference to member ucRadarState
     */
    eProsima_user_DllExport uint8_t& ucRadarState();


    /*!
     * @brief This function sets a value in member fTemperature
     * @param _fTemperature New value for member fTemperature
     */
    eProsima_user_DllExport void fTemperature(
            float _fTemperature);

    /*!
     * @brief This function returns the value of member fTemperature
     * @return Value of member fTemperature
     */
    eProsima_user_DllExport float fTemperature() const;

    /*!
     * @brief This function returns a reference to member fTemperature
     * @return Reference to member fTemperature
     */
    eProsima_user_DllExport float& fTemperature();


    /*!
     * @brief This function sets a value in member ucBlockage
     * @param _ucBlockage New value for member ucBlockage
     */
    eProsima_user_DllExport void ucBlockage(
            uint8_t _ucBlockage);

    /*!
     * @brief This function returns the value of member ucBlockage
     * @return Value of member ucBlockage
     */
    eProsima_user_DllExport uint8_t ucBlockage() const;

    /*!
     * @brief This function returns a reference to member ucBlockage
     * @return Reference to member ucBlockage
     */
    eProsima_user_DllExport uint8_t& ucBlockage();


    /*!
     * @brief This function sets a value in member ucAlignment
     * @param _ucAlignment New value for member ucAlignment
     */
    eProsima_user_DllExport void ucAlignment(
            uint8_t _ucAlignment);

    /*!
     * @brief This function returns the value of member ucAlignment
     * @return Value of member ucAlignment
     */
    eProsima_user_DllExport uint8_t ucAlignment() const;

    /*!
     * @brief This function returns a reference to member ucAlignment
     * @return Reference to member ucAlignment
     */
    eProsima_user_DllExport uint8_t& ucAlignment();

private:

    uint8_t m_ucRadarState{0};
    float m_fTemperature{0.0};
    uint8_t m_ucBlockage{0};
    uint8_t m_ucAlignment{0};

};


/*!
 * @brief This class represents the structure CRadarSrcDataTimematch defined by the user in the IDL file.
 * @ingroup CRadarSrcData
 */
class CRadarSrcDataTimematch : public CDataBase
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport CRadarSrcDataTimematch();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~CRadarSrcDataTimematch();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object CRadarSrcDataTimematch that will be copied.
     */
    eProsima_user_DllExport CRadarSrcDataTimematch(
            const CRadarSrcDataTimematch& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object CRadarSrcDataTimematch that will be copied.
     */
    eProsima_user_DllExport CRadarSrcDataTimematch(
            CRadarSrcDataTimematch&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object CRadarSrcDataTimematch that will be copied.
     */
    eProsima_user_DllExport CRadarSrcDataTimematch& operator =(
            const CRadarSrcDataTimematch& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object CRadarSrcDataTimematch that will be copied.
     */
    eProsima_user_DllExport CRadarSrcDataTimematch& operator =(
            CRadarSrcDataTimematch&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x CRadarSrcDataTimematch object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const CRadarSrcDataTimematch& x) const;

    /*!
     * @brief Comparison operator.
     * @param x CRadarSrcDataTimematch object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const CRadarSrcDataTimematch& x) const;

    /*!
     * @brief This function sets a value in member ucRadarId
     * @param _ucRadarId New value for member ucRadarId
     */
    eProsima_user_DllExport void ucRadarId(
            uint8_t _ucRadarId);

    /*!
     * @brief This function returns the value of member ucRadarId
     * @return Value of member ucRadarId
     */
    eProsima_user_DllExport uint8_t ucRadarId() const;

    /*!
     * @brief This function returns a reference to member ucRadarId
     * @return Reference to member ucRadarId
     */
    eProsima_user_DllExport uint8_t& ucRadarId();


    /*!
     * @brief This function copies the value in member tRadarStatus
     * @param _tRadarStatus New value to be copied in member tRadarStatus
     */
    eProsima_user_DllExport void tRadarStatus(
            const CRadarStatus& _tRadarStatus);

    /*!
     * @brief This function moves the value in member tRadarStatus
     * @param _tRadarStatus New value to be moved in member tRadarStatus
     */
    eProsima_user_DllExport void tRadarStatus(
            CRadarStatus&& _tRadarStatus);

    /*!
     * @brief This function returns a constant reference to member tRadarStatus
     * @return Constant reference to member tRadarStatus
     */
    eProsima_user_DllExport const CRadarStatus& tRadarStatus() const;

    /*!
     * @brief This function returns a reference to member tRadarStatus
     * @return Reference to member tRadarStatus
     */
    eProsima_user_DllExport CRadarStatus& tRadarStatus();


    /*!
     * @brief This function copies the value in member vecPoints
     * @param _vecPoints New value to be copied in member vecPoints
     */
    eProsima_user_DllExport void vecPoints(
            const std::vector<CRadarPoint>& _vecPoints);

    /*!
     * @brief This function moves the value in member vecPoints
     * @param _vecPoints New value to be moved in member vecPoints
     */
    eProsima_user_DllExport void vecPoints(
            std::vector<CRadarPoint>&& _vecPoints);

    /*!
     * @brief This function returns a constant reference to member vecPoints
     * @return Constant reference to member vecPoints
     */
    eProsima_user_DllExport const std::vector<CRadarPoint>& vecPoints() const;

    /*!
     * @brief This function returns a reference to member vecPoints
     * @return Reference to member vecPoints
     */
    eProsima_user_DllExport std::vector<CRadarPoint>& vecPoints();


    /*!
     * @brief This function copies the value in member vecTracks
     * @param _vecTracks New value to be copied in member vecTracks
     */
    eProsima_user_DllExport void vecTracks(
            const std::vector<CRadarTrack>& _vecTracks);

    /*!
     * @brief This function moves the value in member vecTracks
     * @param _vecTracks New value to be moved in member vecTracks
     */
    eProsima_user_DllExport void vecTracks(
            std::vector<CRadarTrack>&& _vecTracks);

    /*!
     * @brief This function returns a constant reference to member vecTracks
     * @return Constant reference to member vecTracks
     */
    eProsima_user_DllExport const std::vector<CRadarTrack>& vecTracks() const;

    /*!
     * @brief This function returns a reference to member vecTracks
     * @return Reference to member vecTracks
     */
    eProsima_user_DllExport std::vector<CRadarTrack>& vecTracks();


    /*!
     * @brief This function sets a value in member fNoisePower
     * @param _fNoisePower New value for member fNoisePower
     */
    eProsima_user_DllExport void fNoisePower(
            float _fNoisePower);

    /*!
     * @brief This function returns the value of member fNoisePower
     * @return Value of member fNoisePower
     */
    eProsima_user_DllExport float fNoisePower() const;

    /*!
     * @brief This function returns a reference to member fNoisePower
     * @return Reference to member fNoisePower
     */
    eProsima_user_DllExport float& fNoisePower();


    /*!
     * @brief This function sets a value in member fInterference
     * @param _fInterference New value for member fInterference
     */
    eProsima_user_DllExport void fInterference(
            float _fInterference);

    /*!
     * @brief This function returns the value of member fInterference
     * @return Value of member fInterference
     */
    eProsima_user_DllExport float fInterference() const;

    /*!
     * @brief This function returns a reference to member fInterference
     * @return Reference to member fInterference
     */
    eProsima_user_DllExport float& fInterference();

private:

    uint8_t m_ucRadarId{0};
    CRadarStatus m_tRadarStatus;
    std::vector<CRadarPoint> m_vecPoints;
    std::vector<CRadarTrack> m_vecTracks;
    float m_fNoisePower{0.0};
    float m_fInterference{0.0};

};

#endif // _FAST_DDS_GENERATED_CRADARSRCDATA_H_



