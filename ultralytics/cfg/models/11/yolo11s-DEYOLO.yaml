# Parameters
nc: 1
scales:
  # 根据双流结构调整深度系数（此处示例调整为0.75，可依需求调整）
  # n: [0.75, 0.25, 1024]  # 调整深度适应双流结构
  n: [0.50, 0.25, 1024] # summary: 319 layers, 2624080 parameters, 2624064 gradients, 6.6 GFLOPs
  s: [0.50, 0.50, 1024] # summary: 319 layers, 9458752 parameters, 9458736 gradients, 21.7 GFLOPs
  m: [0.50, 1.00, 512] # summary: 409 layers, 20114688 parameters, 20114672 gradients, 68.5 GFLOPs
  l: [1.00, 1.00, 512] # summary: 631 layers, 25372160 parameters, 25372144 gradients, 87.6 GFLOPs
  x: [1.00, 1.50, 512] # summary: 631 layers, 56966176 parameters, 56966160 gradients, 196.0 GFLOPs

# 双流骨干网络
backbone:
  # 主分支（例如RGB）
  - [-1, 1, Conv, [64, 3, 2]]  # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]]  # 1-P2/4
  - [-1, 2, C3k2, [256, False, 0.25]]  # 2
  - [-1, 1, Conv, [256, 3, 2]]  # 3-P3/8
  - [-1, 2, C3k2, [512, False, 0.25]]  # 4
  - [-1, 1, Conv, [512, 3, 2]]  # 5-P4/16
  - [-1, 2, C3k2, [512, True]]  # 6
  - [-1, 1, Conv, [1024, 3, 2]]  # 7-P5/32
  - [-1, 2, C3k2, [1024, True]]  # 8
  - [-1, 1, SPPF, [1024, 5]]  # 9
  - [-1, 2, C2PSA, [1024]]  # 10 (主分支输出)

backbone2:
  # 辅助分支（例如红外）
  - [-1, 1, Conv, [64, 3, 2]]  # 11-P1/2
  - [-1, 1, Conv, [128, 3, 2]]  # 12-P2/4
  - [-1, 2, C3k2, [256, False, 0.25]]  # 13
  - [-1, 1, Conv, [256, 3, 2]]  # 14-P3/8
  - [-1, 2, C3k2, [512, False, 0.25]]  # 15
  - [-1, 1, Conv, [512, 3, 2]]  # 16-P4/16
  - [-1, 2, C3k2, [512, True]]  # 17
  - [-1, 1, Conv, [1024, 3, 2]]  # 18-P5/32
  - [-1, 2, C3k2, [1024, True]]  # 19
  - [-1, 1, SPPF, [1024, 5]]  # 20
  - [-1, 2, C2PSA, [1024]]  # 21 (辅助分支输出)

# 改进后的检测头
head:
  # ========== 特征融合阶段 ==========
  # DEA模块融合双流特征（输入来自主辅分支的同尺度层）
  # - [[4, 15], 1, DEA, [256, 80]]   # 22 (P3)
  - [[3, 14], 1, DEA, [256, 80]]   # 22 (P3)
  - [[6, 17], 1, DEA, [512, 40]]   # 23 (P4)
  - [[10, 21], 1, DEA, [1024, 20]] # 24 (P5)

  # ========== 特征金字塔构建 ==========
  # P5->P4
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 25 (上采样P5)
  - [[25, 23], 1, Concat, [1]]  # 26 (拼接融合后的P4)
  - [-1, 2, C3k2, [512, False]]  # 27

  # P4->P3
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 28
  - [[28, 22], 1, Concat, [1]]  # 29
  - [-1, 2, C3k2, [256, False]]  # 30 (P3/8-small)

  # P3->P4
  - [-1, 1, Conv, [256, 3, 2]]  # 31
  - [[31, 27], 1, Concat, [1]]  # 32
  - [-1, 2, C3k2, [512, False]]  # 33 (P4/16-medium)

  # P4->P5
  - [-1, 1, Conv, [512, 3, 2]]  # 34
  - [[34, 24], 1, Concat, [1]]  # 35
  - [-1, 2, C3k2, [1024, True]]  # 36 (P5/32-large)

  # ========== 输出层 ==========
  - [[30, 33, 36], 1, Detect, [nc]]  # Detect(P3, P4, P5)